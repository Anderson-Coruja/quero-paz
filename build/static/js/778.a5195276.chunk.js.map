{"version":3,"file":"static/js/778.a5195276.chunk.js","mappings":"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","sources":["components/sync/SyncHistoryViewer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Card,\n  CardContent,\n  Typography,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  IconButton,\n  Tooltip,\n  CircularProgress,\n  Chip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem\n} from '@mui/material';\nimport {\n  Delete as DeleteIcon,\n  Refresh as RefreshIcon,\n  Info as InfoIcon,\n  ExpandMore as ExpandMoreIcon,\n  ExpandLess as ExpandLessIcon,\n  FilterList as FilterListIcon,\n  DataUsage as DataUsageIcon\n} from '@mui/icons-material';\nimport OfflineStorage from '../../services/sync/offlineStorage';\nimport SyncManager from '../../services/sync/syncManager';\n\n/**\n * SyncHistoryViewer Component - Displays detailed sync history\n * \n * Provides:\n * - Visualization of sync history with timestamps\n * - Details of each sync operation including size and status\n * - Data analytics for sync operations\n */\nconst SyncHistoryViewer = () => {\n  // State for sync history records\n  const [syncHistory, setSyncHistory] = useState([]);\n  const [loadingHistory, setLoadingHistory] = useState(true);\n  const [expandedRow, setExpandedRow] = useState(null);\n  const [detailsDialog, setDetailsDialog] = useState({\n    open: false,\n    details: null\n  });\n  \n  // Filtering and sorting options\n  const [filters, setFilters] = useState({\n    status: 'all', // 'all', 'success', 'failed'\n    timeRange: 'all', // 'all', 'today', 'week', 'month'\n    sortBy: 'date', // 'date', 'size', 'duration'\n    sortOrder: 'desc' // 'asc', 'desc'\n  });\n  \n  // State for filter dialog\n  const [filterDialogOpen, setFilterDialogOpen] = useState(false);\n  \n  // Load sync history\n  useEffect(() => {\n    loadSyncHistory();\n  }, []);\n  \n  // Function to load sync history from storage\n  const loadSyncHistory = async () => {\n    setLoadingHistory(true);\n    try {\n      // Get sync history from storage\n      const history = await OfflineStorage.getItem('statistics', 'syncHistory') || [];\n      setSyncHistory(history);\n    } catch (error) {\n      console.error('Error loading sync history:', error);\n    } finally {\n      setLoadingHistory(false);\n    }\n  };\n  \n  // Handle expanding a row to show more details\n  const handleExpandRow = (index) => {\n    setExpandedRow(expandedRow === index ? null : index);\n  };\n  \n  // Handle opening details dialog\n  const handleOpenDetails = (details) => {\n    setDetailsDialog({\n      open: true,\n      details\n    });\n  };\n  \n  // Handle closing details dialog\n  const handleCloseDetails = () => {\n    setDetailsDialog({\n      open: false,\n      details: null\n    });\n  };\n  \n  // Handle deleting a sync history entry\n  const handleDeleteEntry = async (id) => {\n    try {\n      const updatedHistory = syncHistory.filter(entry => entry.id !== id);\n      setSyncHistory(updatedHistory);\n      \n      // Save updated history to storage\n      await OfflineStorage.setItem('statistics', 'syncHistory', updatedHistory);\n    } catch (error) {\n      console.error('Error deleting sync history entry:', error);\n    }\n  };\n  \n  // Filter and sort sync history based on current filters\n  const getFilteredAndSortedHistory = () => {\n    // Apply status filter\n    let filtered = [...syncHistory];\n    if (filters.status !== 'all') {\n      filtered = filtered.filter(entry => {\n        return filters.status === 'success' ? entry.success : !entry.success;\n      });\n    }\n    \n    // Apply time range filter\n    const now = new Date();\n    if (filters.timeRange !== 'all') {\n      let cutoffDate;\n      if (filters.timeRange === 'today') {\n        cutoffDate = new Date(now.setHours(0, 0, 0, 0));\n      } else if (filters.timeRange === 'week') {\n        cutoffDate = new Date(now.setDate(now.getDate() - 7));\n      } else if (filters.timeRange === 'month') {\n        cutoffDate = new Date(now.setMonth(now.getMonth() - 1));\n      }\n      \n      filtered = filtered.filter(entry => {\n        const entryDate = new Date(entry.timestamp);\n        return entryDate >= cutoffDate;\n      });\n    }\n    \n    // Apply sorting\n    filtered.sort((a, b) => {\n      let aValue, bValue;\n      \n      if (filters.sortBy === 'date') {\n        aValue = new Date(a.timestamp).getTime();\n        bValue = new Date(b.timestamp).getTime();\n      } else if (filters.sortBy === 'size') {\n        aValue = a.dataSize || 0;\n        bValue = b.dataSize || 0;\n      } else if (filters.sortBy === 'duration') {\n        aValue = a.duration || 0;\n        bValue = b.duration || 0;\n      }\n      \n      return filters.sortOrder === 'asc' ? aValue - bValue : bValue - aValue;\n    });\n    \n    return filtered;\n  };\n  \n  // Format date for display\n  const formatDate = (timestamp) => {\n    if (!timestamp) return 'N/A';\n    const date = new Date(timestamp);\n    return date.toLocaleString();\n  };\n  \n  // Format size for display\n  const formatSize = (size) => {\n    if (size === undefined || size === null) return 'N/A';\n    if (size < 1024) return `${size} B`;\n    if (size < 1024 * 1024) return `${(size / 1024).toFixed(2)} KB`;\n    return `${(size / (1024 * 1024)).toFixed(2)} MB`;\n  };\n  \n  // Format duration for display\n  const formatDuration = (duration) => {\n    if (duration === undefined || duration === null) return 'N/A';\n    if (duration < 1000) return `${duration} ms`;\n    return `${(duration / 1000).toFixed(2)} s`;\n  };\n  \n  // Get summary statistics for display\n  const getSyncSummary = () => {\n    // Avoid calculations if no history\n    if (!syncHistory.length) {\n      return {\n        totalSyncs: 0,\n        successRate: 0,\n        avgSize: 0,\n        avgDuration: 0,\n        totalDataSynced: 0\n      };\n    }\n    \n    const totalSyncs = syncHistory.length;\n    const successfulSyncs = syncHistory.filter(entry => entry.success).length;\n    const successRate = (successfulSyncs / totalSyncs) * 100;\n    \n    // Calculate sizes and durations only for successful syncs to avoid skewing the data\n    const successEntries = syncHistory.filter(entry => entry.success);\n    const totalSize = successEntries.reduce((sum, entry) => sum + (entry.dataSize || 0), 0);\n    const totalDuration = successEntries.reduce((sum, entry) => sum + (entry.duration || 0), 0);\n    \n    return {\n      totalSyncs,\n      successRate: successRate.toFixed(1),\n      avgSize: successEntries.length ? totalSize / successEntries.length : 0,\n      avgDuration: successEntries.length ? totalDuration / successEntries.length : 0,\n      totalDataSynced: totalSize\n    };\n  };\n  \n  // Save filter changes\n  const handleSaveFilters = () => {\n    setFilterDialogOpen(false);\n    // The filters state is already updated by the inputs\n  };\n  \n  // Get filterable sync types\n  const getSyncTypes = () => {\n    const types = new Set();\n    syncHistory.forEach(entry => {\n      if (entry.type) types.add(entry.type);\n    });\n    return Array.from(types);\n  };\n  \n  // Refresh the history\n  const handleRefresh = () => {\n    loadSyncHistory();\n  };\n  \n  // Get the filtered and sorted history for display\n  const filteredHistory = getFilteredAndSortedHistory();\n  const syncSummary = getSyncSummary();\n  \n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        Histórico de Sincronização\n      </Typography>\n      \n      {/* Summary Card */}\n      <Card sx={{ mb: 3 }}>\n        <CardContent>\n          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n            <Typography variant=\"h6\" component=\"h3\">\n              Resumo de Sincronização\n            </Typography>\n            <DataUsageIcon sx={{ ml: 1 }} />\n          </Box>\n          \n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2 }}>\n            <Box sx={{ minWidth: 120 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Total de Sincronizações\n              </Typography>\n              <Typography variant=\"h6\">\n                {syncSummary.totalSyncs}\n              </Typography>\n            </Box>\n            \n            <Box sx={{ minWidth: 120 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Taxa de Sucesso\n              </Typography>\n              <Typography variant=\"h6\">\n                {syncSummary.successRate}%\n              </Typography>\n            </Box>\n            \n            <Box sx={{ minWidth: 120 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Tamanho Médio\n              </Typography>\n              <Typography variant=\"h6\">\n                {formatSize(syncSummary.avgSize)}\n              </Typography>\n            </Box>\n            \n            <Box sx={{ minWidth: 120 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Duração Média\n              </Typography>\n              <Typography variant=\"h6\">\n                {formatDuration(syncSummary.avgDuration)}\n              </Typography>\n            </Box>\n            \n            <Box sx={{ minWidth: 120 }}>\n              <Typography variant=\"body2\" color=\"textSecondary\">\n                Total de Dados\n              </Typography>\n              <Typography variant=\"h6\">\n                {formatSize(syncSummary.totalDataSynced)}\n              </Typography>\n            </Box>\n          </Box>\n        </CardContent>\n      </Card>\n      \n      {/* Controls */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n        <Button\n          startIcon={<RefreshIcon />}\n          onClick={handleRefresh}\n          disabled={loadingHistory}\n        >\n          Atualizar\n        </Button>\n        \n        <Button\n          startIcon={<FilterListIcon />}\n          onClick={() => setFilterDialogOpen(true)}\n        >\n          Filtrar\n        </Button>\n      </Box>\n      \n      {/* History Table */}\n      {loadingHistory ? (\n        <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>\n          <CircularProgress />\n        </Box>\n      ) : filteredHistory.length === 0 ? (\n        <Typography variant=\"body1\" sx={{ textAlign: 'center', p: 3 }}>\n          Nenhum histórico de sincronização encontrado.\n        </Typography>\n      ) : (\n        <TableContainer component={Paper}>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell></TableCell>\n                <TableCell>Data</TableCell>\n                <TableCell>Tipo</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Tamanho</TableCell>\n                <TableCell>Duração</TableCell>\n                <TableCell>Ações</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {filteredHistory.map((entry, index) => (\n                <React.Fragment key={entry.id || index}>\n                  <TableRow>\n                    <TableCell>\n                      <IconButton \n                        size=\"small\" \n                        onClick={() => handleExpandRow(index)}\n                      >\n                        {expandedRow === index ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                      </IconButton>\n                    </TableCell>\n                    <TableCell>{formatDate(entry.timestamp)}</TableCell>\n                    <TableCell>{entry.type || 'Manual'}</TableCell>\n                    <TableCell>\n                      <Chip \n                        label={entry.success ? 'Sucesso' : 'Falha'} \n                        color={entry.success ? 'success' : 'error'} \n                        size=\"small\" \n                      />\n                    </TableCell>\n                    <TableCell>{formatSize(entry.dataSize)}</TableCell>\n                    <TableCell>{formatDuration(entry.duration)}</TableCell>\n                    <TableCell>\n                      <Tooltip title=\"Ver detalhes\">\n                        <IconButton \n                          size=\"small\" \n                          onClick={() => handleOpenDetails(entry)}\n                        >\n                          <InfoIcon fontSize=\"small\" />\n                        </IconButton>\n                      </Tooltip>\n                      <Tooltip title=\"Excluir entrada\">\n                        <IconButton \n                          size=\"small\" \n                          onClick={() => handleDeleteEntry(entry.id)}\n                        >\n                          <DeleteIcon fontSize=\"small\" />\n                        </IconButton>\n                      </Tooltip>\n                    </TableCell>\n                  </TableRow>\n                  \n                  {/* Expanded row details */}\n                  {expandedRow === index && (\n                    <TableRow>\n                      <TableCell colSpan={7} sx={{ py: 0 }}>\n                        <Box sx={{ p: 2, backgroundColor: 'background.default' }}>\n                          <Typography variant=\"subtitle2\">\n                            Detalhes da Sincronização:\n                          </Typography>\n                          \n                          {entry.error && (\n                            <Box sx={{ mt: 1 }}>\n                              <Typography variant=\"body2\" color=\"error\">\n                                Erro: {entry.error}\n                              </Typography>\n                            </Box>\n                          )}\n                          \n                          {entry.details && (\n                            <Box sx={{ mt: 1 }}>\n                              <Typography variant=\"body2\">\n                                {entry.details.map((detail, idx) => (\n                                  <div key={idx}>{detail}</div>\n                                ))}\n                              </Typography>\n                            </Box>\n                          )}\n                          \n                          {entry.compressionRatio && (\n                            <Box sx={{ mt: 1 }}>\n                              <Typography variant=\"body2\">\n                                Taxa de compressão: {entry.compressionRatio.toFixed(2)}x\n                              </Typography>\n                            </Box>\n                          )}\n                        </Box>\n                      </TableCell>\n                    </TableRow>\n                  )}\n                </React.Fragment>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      )}\n      \n      {/* Filter Dialog */}\n      <Dialog open={filterDialogOpen} onClose={() => setFilterDialogOpen(false)}>\n        <DialogTitle>Filtros</DialogTitle>\n        <DialogContent>\n          <FormControl fullWidth margin=\"normal\">\n            <InputLabel>Status</InputLabel>\n            <Select\n              value={filters.status}\n              label=\"Status\"\n              onChange={(e) => setFilters({ ...filters, status: e.target.value })}\n            >\n              <MenuItem value=\"all\">Todos</MenuItem>\n              <MenuItem value=\"success\">Sucesso</MenuItem>\n              <MenuItem value=\"failed\">Falha</MenuItem>\n            </Select>\n          </FormControl>\n          \n          <FormControl fullWidth margin=\"normal\">\n            <InputLabel>Período</InputLabel>\n            <Select\n              value={filters.timeRange}\n              label=\"Período\"\n              onChange={(e) => setFilters({ ...filters, timeRange: e.target.value })}\n            >\n              <MenuItem value=\"all\">Todo o período</MenuItem>\n              <MenuItem value=\"today\">Hoje</MenuItem>\n              <MenuItem value=\"week\">Última semana</MenuItem>\n              <MenuItem value=\"month\">Último mês</MenuItem>\n            </Select>\n          </FormControl>\n          \n          <FormControl fullWidth margin=\"normal\">\n            <InputLabel>Ordenar por</InputLabel>\n            <Select\n              value={filters.sortBy}\n              label=\"Ordenar por\"\n              onChange={(e) => setFilters({ ...filters, sortBy: e.target.value })}\n            >\n              <MenuItem value=\"date\">Data</MenuItem>\n              <MenuItem value=\"size\">Tamanho</MenuItem>\n              <MenuItem value=\"duration\">Duração</MenuItem>\n            </Select>\n          </FormControl>\n          \n          <FormControl fullWidth margin=\"normal\">\n            <InputLabel>Ordem</InputLabel>\n            <Select\n              value={filters.sortOrder}\n              label=\"Ordem\"\n              onChange={(e) => setFilters({ ...filters, sortOrder: e.target.value })}\n            >\n              <MenuItem value=\"desc\">Decrescente</MenuItem>\n              <MenuItem value=\"asc\">Crescente</MenuItem>\n            </Select>\n          </FormControl>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setFilterDialogOpen(false)}>Cancelar</Button>\n          <Button onClick={handleSaveFilters} variant=\"contained\">Aplicar</Button>\n        </DialogActions>\n      </Dialog>\n      \n      {/* Details Dialog */}\n      <Dialog open={detailsDialog.open} onClose={handleCloseDetails} maxWidth=\"md\">\n        <DialogTitle>Detalhes da Sincronização</DialogTitle>\n        <DialogContent>\n          {detailsDialog.details && (\n            <Box sx={{ minWidth: 400 }}>\n              <Typography variant=\"subtitle1\" gutterBottom>\n                {formatDate(detailsDialog.details.timestamp)}\n              </Typography>\n              \n              <Divider sx={{ my: 2 }} />\n              \n              <TableContainer>\n                <Table size=\"small\">\n                  <TableBody>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">Tipo</TableCell>\n                      <TableCell>{detailsDialog.details.type || 'Manual'}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">Status</TableCell>\n                      <TableCell>\n                        <Chip \n                          label={detailsDialog.details.success ? 'Sucesso' : 'Falha'} \n                          color={detailsDialog.details.success ? 'success' : 'error'} \n                          size=\"small\" \n                        />\n                      </TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">Tamanho</TableCell>\n                      <TableCell>{formatSize(detailsDialog.details.dataSize)}</TableCell>\n                    </TableRow>\n                    <TableRow>\n                      <TableCell component=\"th\" scope=\"row\">Duração</TableCell>\n                      <TableCell>{formatDuration(detailsDialog.details.duration)}</TableCell>\n                    </TableRow>\n                    {detailsDialog.details.compressionRatio && (\n                      <TableRow>\n                        <TableCell component=\"th\" scope=\"row\">Taxa de compressão</TableCell>\n                        <TableCell>{detailsDialog.details.compressionRatio.toFixed(2)}x</TableCell>\n                      </TableRow>\n                    )}\n                    {detailsDialog.details.device && (\n                      <TableRow>\n                        <TableCell component=\"th\" scope=\"row\">Dispositivo</TableCell>\n                        <TableCell>{detailsDialog.details.device}</TableCell>\n                      </TableRow>\n                    )}\n                    {detailsDialog.details.network && (\n                      <TableRow>\n                        <TableCell component=\"th\" scope=\"row\">Rede</TableCell>\n                        <TableCell>{detailsDialog.details.network}</TableCell>\n                      </TableRow>\n                    )}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n              \n              {detailsDialog.details.error && (\n                <Box sx={{ mt: 2 }}>\n                  <Typography variant=\"subtitle2\" color=\"error\">\n                    Erro:\n                  </Typography>\n                  <Box sx={{ p: 1, bgcolor: 'error.light', borderRadius: 1, mt: 1 }}>\n                    <Typography variant=\"body2\" sx={{ wordBreak: 'break-word' }}>\n                      {detailsDialog.details.error}\n                    </Typography>\n                  </Box>\n                </Box>\n              )}\n              \n              {detailsDialog.details.details && detailsDialog.details.details.length > 0 && (\n                <Box sx={{ mt: 2 }}>\n                  <Typography variant=\"subtitle2\">\n                    Detalhes adicionais:\n                  </Typography>\n                  <List>\n                    {detailsDialog.details.details.map((detail, idx) => (\n                      <Typography key={idx} variant=\"body2\" component=\"li\" sx={{ ml: 2 }}>\n                        {detail}\n                      </Typography>\n                    ))}\n                  </List>\n                </Box>\n              )}\n              \n              {detailsDialog.details.syncedItems && (\n                <Box sx={{ mt: 2 }}>\n                  <Typography variant=\"subtitle2\">\n                    Itens sincronizados:\n                  </Typography>\n                  <TableContainer component={Paper} variant=\"outlined\" sx={{ mt: 1 }}>\n                    <Table size=\"small\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>Tipo</TableCell>\n                          <TableCell>Total</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                        {Object.entries(detailsDialog.details.syncedItems).map(([itemType, count]) => (\n                          <TableRow key={itemType}>\n                            <TableCell>{itemType}</TableCell>\n                            <TableCell>{count}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                </Box>\n              )}\n            </Box>\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseDetails}>Fechar</Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default SyncHistoryViewer;\n"],"names":["SyncHistoryViewer","syncHistory","setSyncHistory","useState","loadingHistory","setLoadingHistory","expandedRow","setExpandedRow","detailsDialog","setDetailsDialog","open","details","filters","setFilters","status","timeRange","sortBy","sortOrder","filterDialogOpen","setFilterDialogOpen","useEffect","loadSyncHistory","async","history","OfflineStorage","getItem","error","console","handleCloseDetails","formatDate","timestamp","Date","toLocaleString","formatSize","size","undefined","concat","toFixed","formatDuration","duration","filteredHistory","getFilteredAndSortedHistory","filtered","filter","entry","success","now","cutoffDate","setHours","setDate","getDate","setMonth","getMonth","sort","a","b","aValue","bValue","getTime","dataSize","syncSummary","getSyncSummary","length","totalSyncs","successRate","avgSize","avgDuration","totalDataSynced","successEntries","totalSize","reduce","sum","totalDuration","_jsxs","Box","sx","p","children","_jsx","Typography","variant","component","gutterBottom","Card","mb","CardContent","display","alignItems","DataUsageIcon","ml","flexWrap","gap","minWidth","color","justifyContent","Button","startIcon","RefreshIcon","onClick","handleRefresh","disabled","FilterListIcon","CircularProgress","textAlign","TableContainer","Paper","Table","TableHead","TableRow","TableCell","TableBody","map","index","React","IconButton","handleExpandRow","ExpandLessIcon","ExpandMoreIcon","type","Chip","label","Tooltip","title","InfoIcon","fontSize","updatedHistory","id","setItem","handleDeleteEntry","DeleteIcon","colSpan","py","backgroundColor","mt","detail","idx","compressionRatio","Dialog","onClose","DialogTitle","DialogContent","FormControl","fullWidth","margin","InputLabel","Select","value","onChange","e","_objectSpread","target","MenuItem","DialogActions","handleSaveFilters","maxWidth","Divider","my","scope","device","network","bgcolor","borderRadius","wordBreak","List","syncedItems","Object","entries","_ref","itemType","count"],"sourceRoot":""}