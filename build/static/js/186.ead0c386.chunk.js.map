{"version":3,"file":"static/js/186.ead0c386.chunk.js","mappings":"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","sources":["services/ai/patternAnalysis.js","components/ai/PatternAnalysisCard.jsx","services/ai/smartRules.js","components/ai/SmartRulesCard.jsx","services/ai/blockProfiles.js","components/ai/BlockProfilesCard.jsx","services/ai/sharedBlacklist.js","components/ai/SharedBlacklistCard.jsx","components/ai/AdvancedProtectionPanel.jsx"],"sourcesContent":["/**\n * Sistema de Análise de Padrões para o Quero Paz\n * \n * Este serviço implementa um sistema simples de aprendizado para identificar\n * padrões de chamadas indesejadas e sugerir regras de bloqueio automático.\n */\n\nimport storage from '../storage';\n\n// Constantes para limites e configurações\nconst CALL_HISTORY_LIMIT = 100; // Limite de histórico para análise\nconst FREQUENCY_THRESHOLD = 3;  // Número mínimo de chamadas para identificar um padrão\nconst TIME_WINDOW = 24 * 60 * 60 * 1000; // 24 horas em milissegundos\n\n/**\n * Serviço de análise de padrões de chamadas\n */\nconst patternAnalysis = {\n  /**\n   * Análise básica de frequência para identificar números repetitivos\n   * @returns {Promise<Array>} Lista de números com alta frequência de chamadas\n   */\n  async analyzeFrequencyPatterns() {\n    // Obtém histórico de chamadas silenciadas\n    const silencedCalls = await storage.getSilencedCalls();\n    \n    // Extrai apenas os números de telefone\n    const phoneNumbers = silencedCalls.map(call => {\n      const parts = call.includes(' - ') ? call.split(' - ') : [call, ''];\n      return parts[0].trim();\n    });\n    \n    // Conta a frequência de cada número\n    const frequency = {};\n    phoneNumbers.forEach(number => {\n      frequency[number] = (frequency[number] || 0) + 1;\n    });\n    \n    // Filtra apenas os números que excedem o limite de frequência\n    const frequentCallers = Object.keys(frequency)\n      .filter(number => frequency[number] >= FREQUENCY_THRESHOLD)\n      .map(number => ({\n        phoneNumber: number,\n        frequency: frequency[number],\n        confidence: Math.min(frequency[number] / FREQUENCY_THRESHOLD * 100, 100),\n        suggestedAction: 'block'\n      }));\n    \n    return frequentCallers;\n  },\n  \n  /**\n   * Análise de padrões temporais (horários de chamadas)\n   * @returns {Promise<Array>} Padrões temporais identificados\n   */\n  async analyzeTimePatterns() {\n    const silencedCalls = await storage.getSilencedCalls();\n    const timePatterns = [];\n    \n    // Mapa para armazenar contagens por hora do dia\n    const hourlyDistribution = Array(24).fill(0);\n    \n    // Processa cada chamada para identificar padrões de hora\n    silencedCalls.forEach(call => {\n      // Extrai informações de tempo das chamadas (formato: \"... às HH:MM\")\n      const timeMatch = call.match(/às (\\d{2}):(\\d{2})/);\n      if (timeMatch) {\n        const hour = parseInt(timeMatch[1], 10);\n        hourlyDistribution[hour]++;\n      }\n    });\n    \n    // Identifica horas com alta frequência de chamadas\n    for (let hour = 0; hour < 24; hour++) {\n      if (hourlyDistribution[hour] >= FREQUENCY_THRESHOLD) {\n        timePatterns.push({\n          hour,\n          frequency: hourlyDistribution[hour],\n          confidence: Math.min(hourlyDistribution[hour] / FREQUENCY_THRESHOLD * 100, 100),\n          suggestedAction: 'create_time_rule'\n        });\n      }\n    }\n    \n    return timePatterns;\n  },\n  \n  /**\n   * Analisa padrões baseados em prefixos comuns (ex: mesmo DDD ou início do número)\n   * @returns {Promise<Array>} Padrões de prefixo identificados\n   */\n  async analyzePrefixPatterns() {\n    const silencedCalls = await storage.getSilencedCalls();\n    const prefixPatterns = {};\n    \n    // Extrai números e agrupa por prefixos (2 e 3 dígitos)\n    silencedCalls.forEach(call => {\n      const parts = call.includes(' - ') ? call.split(' - ') : [call, ''];\n      const phoneNumber = parts[0].trim().replace(/\\D/g, ''); // Remove não-dígitos\n      \n      if (phoneNumber.length >= 2) {\n        // Prefixo de 2 dígitos (geralmente DDD)\n        const prefix2 = phoneNumber.substring(0, 2);\n        prefixPatterns[prefix2] = (prefixPatterns[prefix2] || 0) + 1;\n        \n        // Prefixo de 3 dígitos (pode identificar operadoras ou tipos de serviço)\n        if (phoneNumber.length >= 3) {\n          const prefix3 = phoneNumber.substring(0, 3);\n          prefixPatterns[prefix3] = (prefixPatterns[prefix3] || 0) + 1;\n        }\n      }\n    });\n    \n    // Filtra os prefixos mais comuns\n    const significantPrefixes = Object.keys(prefixPatterns)\n      .filter(prefix => prefixPatterns[prefix] >= FREQUENCY_THRESHOLD)\n      .map(prefix => ({\n        prefix,\n        length: prefix.length,\n        frequency: prefixPatterns[prefix],\n        confidence: Math.min(prefixPatterns[prefix] / FREQUENCY_THRESHOLD * 100, 100),\n        suggestedAction: 'create_prefix_rule'\n      }))\n      .sort((a, b) => b.frequency - a.frequency); // Ordena por frequência\n    \n    return significantPrefixes;\n  },\n  \n  /**\n   * Gera recomendações de bloqueio com base nas análises\n   * @returns {Promise<Array>} Recomendações de bloqueio\n   */\n  async generateBlockingRecommendations() {\n    const [frequencyPatterns, timePatterns, prefixPatterns] = await Promise.all([\n      this.analyzeFrequencyPatterns(),\n      this.analyzeTimePatterns(),\n      this.analyzePrefixPatterns()\n    ]);\n    \n    // Combina todas as recomendações\n    const recommendations = [\n      // Recomendações específicas de número\n      ...frequencyPatterns.map(pattern => ({\n        type: 'number',\n        value: pattern.phoneNumber,\n        reason: `Ligou ${pattern.frequency} vezes`,\n        confidence: pattern.confidence,\n        action: 'block_number'\n      })),\n      \n      // Recomendações baseadas em hora\n      ...timePatterns.map(pattern => ({\n        type: 'time',\n        value: `${pattern.hour}:00`,\n        reason: `${pattern.frequency} chamadas indesejadas neste horário`,\n        confidence: pattern.confidence,\n        action: 'block_time'\n      })),\n      \n      // Recomendações baseadas em prefixo\n      ...prefixPatterns.filter(p => p.confidence > 70).map(pattern => ({\n        type: 'prefix',\n        value: pattern.prefix,\n        reason: `${pattern.frequency} chamadas com este prefixo`,\n        confidence: pattern.confidence,\n        action: 'block_prefix'\n      }))\n    ];\n    \n    // Ordena por confiança (mais confiável primeiro)\n    return recommendations.sort((a, b) => b.confidence - a.confidence);\n  }\n};\n\nexport default patternAnalysis;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport patternAnalysis from '../../services/ai/patternAnalysis';\n\n/**\n * Componente que exibe resultados da análise de padrões e recomendações\n */\nconst PatternAnalysisCard = ({ onApplyRecommendation }) => {\n  const [loading, setLoading] = useState(true);\n  const [recommendations, setRecommendations] = useState([]);\n  const [expanded, setExpanded] = useState(false);\n\n  // Carrega recomendações ao montar o componente\n  const loadRecommendations = useCallback(async () => {\n    setLoading(true);\n    try {\n      const results = await patternAnalysis.generateBlockingRecommendations();\n      setRecommendations(results);\n    } catch (error) {\n      console.error('Erro ao carregar recomendações:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadRecommendations();\n  }, [loadRecommendations]);\n\n  // Formata a porcentagem de confiança para exibição\n  const getConfidenceLabel = (confidence) => {\n    if (confidence >= 80) return { text: 'Alta', class: 'bg-paz-green-100 text-paz-green-800' };\n    if (confidence >= 50) return { text: 'Média', class: 'bg-yellow-100 text-yellow-800' };\n    return { text: 'Baixa', class: 'bg-gray-100 text-gray-800' };\n  };\n\n  // Formata o tipo de recomendação para exibição\n  const getTypeLabel = (type) => {\n    switch (type) {\n      case 'number': return { text: 'Número', icon: '📱' };\n      case 'time': return { text: 'Horário', icon: '🕒' };\n      case 'prefix': return { text: 'Prefixo', icon: '🔢' };\n      default: return { text: 'Outro', icon: '📋' };\n    }\n  };\n\n  // Manipula a aplicação de uma recomendação\n  const handleApply = (recommendation) => {\n    if (onApplyRecommendation) {\n      onApplyRecommendation(recommendation);\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-paz shadow-paz overflow-hidden transition-all\">\n      <div \n        className=\"bg-paz-blue-50 p-4 flex justify-between items-center cursor-pointer border-b border-paz-blue-100\"\n        onClick={() => setExpanded(!expanded)}\n      >\n        <div className=\"flex items-center\">\n          <div className=\"text-paz-blue-600 p-2 rounded-full bg-paz-blue-100 mr-3\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n            </svg>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-lg text-paz-blue-800\">Análise Inteligente</h3>\n            <p className=\"text-sm text-paz-blue-600\">\n              {loading ? 'Analisando padrões...' : \n                `${recommendations.length} recomendações encontradas`}\n            </p>\n          </div>\n        </div>\n        <div className=\"text-paz-blue-600\">\n          <svg \n            xmlns=\"http://www.w3.org/2000/svg\" \n            className={`h-6 w-6 transition-transform ${expanded ? 'rotate-180' : ''}`} \n            fill=\"none\" \n            viewBox=\"0 0 24 24\" \n            stroke=\"currentColor\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </div>\n      </div>\n\n      {expanded && (\n        <div className=\"p-4\">\n          {loading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-paz-blue-600\"></div>\n            </div>\n          ) : recommendations.length > 0 ? (\n            <div className=\"space-y-3\">\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Nossa análise identificou padrões em chamadas bloqueadas e sugere as seguintes ações:\n              </p>\n              \n              {recommendations.slice(0, 5).map((rec, index) => {\n                const confidenceLabel = getConfidenceLabel(rec.confidence);\n                const typeLabel = getTypeLabel(rec.type);\n                \n                return (\n                  <div key={index} className=\"bg-gray-50 p-3 rounded-lg border border-gray-200\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex items-center\">\n                        <span className=\"text-xl mr-2\">{typeLabel.icon}</span>\n                        <div>\n                          <h4 className=\"font-medium\">{rec.value}</h4>\n                          <p className=\"text-sm text-gray-600\">{rec.reason}</p>\n                        </div>\n                      </div>\n                      <span className={`text-xs px-2 py-1 rounded-full ${confidenceLabel.class}`}>\n                        {confidenceLabel.text}\n                      </span>\n                    </div>\n                    <div className=\"mt-3 flex justify-end\">\n                      <button \n                        onClick={() => handleApply(rec)}\n                        className=\"px-3 py-1 bg-paz-blue-600 hover:bg-paz-blue-700 text-white text-sm rounded transition\"\n                      >\n                        Aplicar\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n              \n              {recommendations.length > 5 && (\n                <div className=\"text-center pt-2\">\n                  <button className=\"text-sm text-paz-blue-600 hover:text-paz-blue-800\">\n                    Ver mais {recommendations.length - 5} recomendações\n                  </button>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-6\">\n              <p className=\"text-gray-600\">\n                Nenhum padrão significativo identificado ainda.\n                Continue bloqueando chamadas para melhorar as recomendações.\n              </p>\n              <button \n                onClick={loadRecommendations}\n                className=\"mt-4 px-4 py-2 bg-paz-blue-100 text-paz-blue-700 rounded-lg hover:bg-paz-blue-200 transition\"\n              >\n                Atualizar análise\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PatternAnalysisCard;\n","/**\n * Sistema de Regras Inteligentes para o Quero Paz\n * \n * Este serviço implementa regras contextuais avançadas para\n * bloqueio inteligente de chamadas baseado em diversos fatores.\n */\n\nimport storage from '../storage';\n\n// Tipos de regras\nexport const RULE_TYPES = {\n  TIME_BASED: 'time_based',     // Baseada em horário\n  LOCATION_BASED: 'location',   // Baseada em localização\n  WHITELIST: 'whitelist',       // Lista branca (sempre permitir)\n  DURATION: 'duration',         // Baseada em duração de chamada\n  PREFIX: 'prefix',             // Baseada em prefixo do número\n  CALENDAR: 'calendar'          // Baseada em eventos do calendário\n};\n\n// Estados de regras\nexport const RULE_STATUS = {\n  ACTIVE: 'active',\n  INACTIVE: 'inactive',\n  AUTO: 'auto'  // Ativada automaticamente baseada em condições\n};\n\n/**\n * Serviço de regras inteligentes\n */\nconst smartRules = {\n  /**\n   * Obtém todas as regras configuradas\n   * @returns {Promise<Array>} Lista de regras\n   */\n  async getRules() {\n    const rules = await storage.getItem('smart_rules');\n    return rules || [];\n  },\n  \n  /**\n   * Adiciona uma nova regra\n   * @param {Object} rule - Configuração da regra\n   * @returns {Promise<Object>} Regra adicionada com ID\n   */\n  async addRule(rule) {\n    const rules = await this.getRules();\n    \n    // Gera ID único para a regra\n    const newRule = {\n      ...rule,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString(),\n      status: rule.status || RULE_STATUS.ACTIVE\n    };\n    \n    // Adiciona a nova regra\n    await storage.setItem('smart_rules', [...rules, newRule]);\n    return newRule;\n  },\n  \n  /**\n   * Atualiza uma regra existente\n   * @param {string} ruleId - ID da regra\n   * @param {Object} updates - Campos a atualizar\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async updateRule(ruleId, updates) {\n    const rules = await this.getRules();\n    const index = rules.findIndex(rule => rule.id === ruleId);\n    \n    if (index === -1) return false;\n    \n    // Atualiza a regra\n    rules[index] = {\n      ...rules[index],\n      ...updates,\n      updatedAt: new Date().toISOString()\n    };\n    \n    await storage.setItem('smart_rules', rules);\n    return true;\n  },\n  \n  /**\n   * Remove uma regra\n   * @param {string} ruleId - ID da regra\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async deleteRule(ruleId) {\n    const rules = await this.getRules();\n    const newRules = rules.filter(rule => rule.id !== ruleId);\n    \n    if (newRules.length === rules.length) return false;\n    \n    await storage.setItem('smart_rules', newRules);\n    return true;\n  },\n  \n  /**\n   * Cria uma regra baseada em horário\n   * @param {number} startHour - Hora de início (0-23)\n   * @param {number} endHour - Hora de fim (0-23)\n   * @param {Array} daysOfWeek - Dias da semana (0-6, 0 = domingo)\n   * @param {string} name - Nome da regra\n   * @returns {Promise<Object>} Regra criada\n   */\n  async createTimeRule(startHour, endHour, daysOfWeek, name) {\n    return this.addRule({\n      type: RULE_TYPES.TIME_BASED,\n      name: name || `Bloqueio das ${startHour}h às ${endHour}h`,\n      config: {\n        startHour,\n        endHour,\n        daysOfWeek: daysOfWeek || [0, 1, 2, 3, 4, 5, 6] // Todos os dias por padrão\n      },\n      action: 'block',\n      status: RULE_STATUS.ACTIVE\n    });\n  },\n  \n  /**\n   * Cria uma regra de lista branca (contatos sempre permitidos)\n   * @param {Array} phoneNumbers - Lista de números a permitir sempre\n   * @param {string} name - Nome da regra\n   * @returns {Promise<Object>} Regra criada\n   */\n  async createWhitelistRule(phoneNumbers, name) {\n    return this.addRule({\n      type: RULE_TYPES.WHITELIST,\n      name: name || `Lista de contatos prioritários`,\n      config: {\n        phoneNumbers: phoneNumbers || []\n      },\n      action: 'allow',\n      status: RULE_STATUS.ACTIVE\n    });\n  },\n  \n  /**\n   * Cria uma regra para bloquear chamadas curtas repetitivas\n   * @param {number} maxDuration - Duração máxima (em segundos) para considerar uma chamada curta\n   * @param {number} minFrequency - Frequência mínima para acionar o bloqueio\n   * @param {string} name - Nome da regra\n   * @returns {Promise<Object>} Regra criada\n   */\n  async createDurationRule(maxDuration, minFrequency, name) {\n    return this.addRule({\n      type: RULE_TYPES.DURATION,\n      name: name || `Bloqueio de chamadas curtas repetitivas`,\n      config: {\n        maxDuration: maxDuration || 5, // 5 segundos por padrão\n        minFrequency: minFrequency || 3, // 3 chamadas para acionar\n        timeWindow: 60 * 60 * 1000 // 1 hora em milissegundos\n      },\n      action: 'block',\n      status: RULE_STATUS.ACTIVE\n    });\n  },\n  \n  /**\n   * Avalia se uma chamada deve ser bloqueada com base nas regras ativas\n   * @param {Object} call - Dados da chamada (número, hora, etc)\n   * @returns {Promise<Object>} Resultado da avaliação\n   */\n  async evaluateCall(call) {\n    const rules = await this.getRules();\n    const activeRules = rules.filter(rule => rule.status === RULE_STATUS.ACTIVE || rule.status === RULE_STATUS.AUTO);\n    \n    // Primeiro verifica lista branca - se estiver nela, sempre permite\n    const whitelistRules = activeRules.filter(rule => rule.type === RULE_TYPES.WHITELIST);\n    for (const rule of whitelistRules) {\n      if (rule.config.phoneNumbers.includes(call.phoneNumber)) {\n        return {\n          action: 'allow',\n          reason: 'Contato prioritário',\n          rule: rule\n        };\n      }\n    }\n    \n    // Em seguida, verifica regras de bloqueio\n    for (const rule of activeRules) {\n      if (rule.type === RULE_TYPES.WHITELIST) continue; // Já verificadas acima\n      \n      // Verifica regras baseadas em horário\n      if (rule.type === RULE_TYPES.TIME_BASED) {\n        const now = new Date();\n        const currentHour = now.getHours();\n        const currentDay = now.getDay();\n        \n        if (rule.config.daysOfWeek.includes(currentDay)) {\n          // Verifica se estamos no intervalo de horas especificado\n          if (rule.config.startHour <= rule.config.endHour) {\n            // Caso normal (ex: 9h às 17h)\n            if (currentHour >= rule.config.startHour && currentHour < rule.config.endHour) {\n              return {\n                action: rule.action,\n                reason: `Horário restrito: ${rule.name}`,\n                rule: rule\n              };\n            }\n          } else {\n            // Caso de intervalo que passa da meia-noite (ex: 22h às 6h)\n            if (currentHour >= rule.config.startHour || currentHour < rule.config.endHour) {\n              return {\n                action: rule.action,\n                reason: `Horário restrito: ${rule.name}`,\n                rule: rule\n              };\n            }\n          }\n        }\n      }\n      \n      // Verifica regras baseadas em prefixo\n      if (rule.type === RULE_TYPES.PREFIX && call.phoneNumber) {\n        if (call.phoneNumber.startsWith(rule.config.prefix)) {\n          return {\n            action: rule.action,\n            reason: `Prefixo bloqueado: ${rule.name}`,\n            rule: rule\n          };\n        }\n      }\n      \n      // Verifica regras baseadas em duração\n      if (rule.type === RULE_TYPES.DURATION) {\n        // Obter histórico recente desse número\n        const recentCalls = await this.getRecentCallsByNumber(call.phoneNumber, rule.config.timeWindow);\n        const shortCalls = recentCalls.filter(c => c.duration <= rule.config.maxDuration);\n        \n        if (shortCalls.length >= rule.config.minFrequency) {\n          return {\n            action: rule.action,\n            reason: `Padrão detectado: ${shortCalls.length} chamadas curtas`,\n            rule: rule\n          };\n        }\n      }\n    }\n    \n    // Nenhuma regra encontrada\n    return {\n      action: 'default',\n      reason: 'Nenhuma regra aplicável'\n    };\n  },\n  \n  /**\n   * Obtém chamadas recentes de um determinado número\n   * @param {string} phoneNumber - Número de telefone\n   * @param {number} timeWindow - Janela de tempo (ms)\n   * @returns {Promise<Array>} Chamadas recentes\n   */\n  async getRecentCallsByNumber(phoneNumber, timeWindow) {\n    const now = Date.now();\n    const calls = await storage.getCallHistory();\n    \n    return calls.filter(call => {\n      // Verifica se é do mesmo número\n      if (call.phoneNumber !== phoneNumber) return false;\n      \n      // Verifica se está dentro da janela de tempo\n      const callTime = new Date(call.time).getTime();\n      return (now - callTime) <= timeWindow;\n    });\n  },\n  \n  /**\n   * Gera recomendações para novas regras com base no histórico\n   * @returns {Promise<Array>} Recomendações de regras\n   */\n  async generateRuleRecommendations() {\n    // Esta função seria aprimorada com análise de padrões mais sofisticada\n    // Por ora, retorna exemplos básicos\n    return [\n      {\n        type: RULE_TYPES.TIME_BASED,\n        name: 'Modo Noturno',\n        description: 'Bloquear chamadas durante a noite',\n        config: {\n          startHour: 22,\n          endHour: 7,\n          daysOfWeek: [0, 1, 2, 3, 4, 5, 6]\n        }\n      },\n      {\n        type: RULE_TYPES.DURATION,\n        name: 'Anti-Telemarketing',\n        description: 'Bloquear números que fazem múltiplas chamadas curtas',\n        config: {\n          maxDuration: 5,\n          minFrequency: 2,\n          timeWindow: 60 * 60 * 1000\n        }\n      }\n    ];\n  }\n};\n\nexport default smartRules;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport smartRules, { RULE_TYPES, RULE_STATUS } from '../../services/ai/smartRules';\n\n/**\n * Componente que exibe e gerencia regras inteligentes\n */\nconst SmartRulesCard = () => {\n  const [rules, setRules] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [expanded, setExpanded] = useState(false);\n  const [editingRule, setEditingRule] = useState(null);\n\n  // Carrega regras existentes\n  const loadRules = useCallback(async () => {\n    setLoading(true);\n    try {\n      const rulesList = await smartRules.getRules();\n      setRules(rulesList);\n    } catch (error) {\n      console.error('Erro ao carregar regras:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadRules();\n  }, [loadRules]);\n\n  // Atualiza status de uma regra\n  const handleToggleRule = async (ruleId, currentStatus) => {\n    try {\n      const newStatus = currentStatus === RULE_STATUS.ACTIVE \n        ? RULE_STATUS.INACTIVE \n        : RULE_STATUS.ACTIVE;\n        \n      await smartRules.updateRule(ruleId, { status: newStatus });\n      loadRules(); // Recarrega a lista para refletir a mudança\n    } catch (error) {\n      console.error('Erro ao atualizar regra:', error);\n    }\n  };\n\n  // Remove uma regra\n  const handleDeleteRule = async (ruleId) => {\n    try {\n      await smartRules.deleteRule(ruleId);\n      loadRules(); // Recarrega a lista para refletir a mudança\n    } catch (error) {\n      console.error('Erro ao excluir regra:', error);\n    }\n  };\n\n  // Cria uma nova regra baseada em horário\n  const handleCreateTimeRule = async () => {\n    try {\n      await smartRules.createTimeRule(22, 7, [0, 1, 2, 3, 4, 5, 6], 'Silêncio noturno');\n      loadRules(); // Recarrega a lista para mostrar a nova regra\n    } catch (error) {\n      console.error('Erro ao criar regra de horário:', error);\n    }\n  };\n\n  // Cria uma nova regra de lista branca\n  const handleCreateWhitelistRule = async () => {\n    try {\n      await smartRules.createWhitelistRule([], 'Contatos prioritários');\n      loadRules(); // Recarrega a lista para mostrar a nova regra\n    } catch (error) {\n      console.error('Erro ao criar regra de lista branca:', error);\n    }\n  };\n\n  // Cria uma nova regra baseada em duração\n  const handleCreateDurationRule = async () => {\n    try {\n      await smartRules.createDurationRule(5, 3, 'Bloqueio anti-telemarketing');\n      loadRules(); // Recarrega a lista para mostrar a nova regra\n    } catch (error) {\n      console.error('Erro ao criar regra de duração:', error);\n    }\n  };\n\n  // Renderiza ícone para o tipo de regra\n  const renderRuleIcon = (type) => {\n    switch (type) {\n      case RULE_TYPES.TIME_BASED:\n        return <span className=\"text-lg\">🕒</span>;\n      case RULE_TYPES.WHITELIST:\n        return <span className=\"text-lg\">✅</span>;\n      case RULE_TYPES.DURATION:\n        return <span className=\"text-lg\">⏱️</span>;\n      case RULE_TYPES.PREFIX:\n        return <span className=\"text-lg\">📞</span>;\n      default:\n        return <span className=\"text-lg\">🛡️</span>;\n    }\n  };\n\n  // Formata a descrição da regra para exibição\n  const formatRuleDescription = (rule) => {\n    switch (rule.type) {\n      case RULE_TYPES.TIME_BASED:\n        return `${rule.config.startHour}h às ${rule.config.endHour}h`;\n      case RULE_TYPES.WHITELIST:\n        const count = rule.config.phoneNumbers?.length || 0;\n        return `${count} contatos permitidos`;\n      case RULE_TYPES.DURATION:\n        return `Chamadas < ${rule.config.maxDuration}s`;\n      case RULE_TYPES.PREFIX:\n        return `Prefixo: ${rule.config.prefix}`;\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-paz shadow-paz overflow-hidden transition-all mb-4\">\n      <div \n        className=\"bg-paz-blue-50 p-4 flex justify-between items-center cursor-pointer border-b border-paz-blue-100\"\n        onClick={() => setExpanded(!expanded)}\n      >\n        <div className=\"flex items-center\">\n          <div className=\"text-paz-blue-600 p-2 rounded-full bg-paz-blue-100 mr-3\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n            </svg>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-lg text-paz-blue-800\">Regras Inteligentes</h3>\n            <p className=\"text-sm text-paz-blue-600\">\n              {rules.filter(r => r.status === RULE_STATUS.ACTIVE).length} regras ativas\n            </p>\n          </div>\n        </div>\n        <div className=\"text-paz-blue-600\">\n          <svg \n            xmlns=\"http://www.w3.org/2000/svg\" \n            className={`h-6 w-6 transition-transform ${expanded ? 'rotate-180' : ''}`} \n            fill=\"none\" \n            viewBox=\"0 0 24 24\" \n            stroke=\"currentColor\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </div>\n      </div>\n\n      {expanded && (\n        <div className=\"p-4\">\n          {loading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-paz-blue-600\"></div>\n            </div>\n          ) : (\n            <div>\n              {/* Lista de regras existentes */}\n              {rules.length > 0 ? (\n                <div className=\"space-y-3 mb-6\">\n                  {rules.map((rule) => (\n                    <div \n                      key={rule.id} \n                      className={`p-3 rounded-lg border ${\n                        rule.status === RULE_STATUS.ACTIVE \n                          ? 'border-paz-blue-500 bg-paz-blue-50' \n                          : 'border-gray-200 bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex items-center\">\n                          {renderRuleIcon(rule.type)}\n                          <div className=\"ml-2\">\n                            <h4 className=\"font-medium\">{rule.name}</h4>\n                            <p className=\"text-sm text-gray-600\">{formatRuleDescription(rule)}</p>\n                          </div>\n                        </div>\n                        \n                        {/* Toggle Switch */}\n                        <div className=\"relative inline-block w-10 align-middle select-none\">\n                          <input \n                            type=\"checkbox\" \n                            name={`toggle-${rule.id}`} \n                            id={`toggle-${rule.id}`}\n                            className=\"sr-only peer\"\n                            checked={rule.status === RULE_STATUS.ACTIVE}\n                            onChange={() => handleToggleRule(rule.id, rule.status)}\n                          />\n                          <label \n                            htmlFor={`toggle-${rule.id}`}\n                            className=\"block h-6 overflow-hidden rounded-full bg-gray-300 cursor-pointer peer-checked:bg-paz-blue-600\"\n                          >\n                            <span className=\"absolute transform transition-transform duration-200 ease-in-out left-1 top-1 bg-white rounded-full h-4 w-4 peer-checked:translate-x-4\"></span>\n                          </label>\n                        </div>\n                      </div>\n                      \n                      {/* Actions */}\n                      <div className=\"mt-3 flex justify-end space-x-2\">\n                        <button \n                          onClick={() => setEditingRule(rule)}\n                          className=\"px-3 py-1 bg-gray-200 hover:bg-gray-300 text-gray-800 text-sm rounded transition\"\n                        >\n                          Editar\n                        </button>\n                        <button \n                          onClick={() => handleDeleteRule(rule.id)}\n                          className=\"px-3 py-1 bg-paz-red-100 hover:bg-paz-red-200 text-paz-red-800 text-sm rounded transition\"\n                        >\n                          Excluir\n                        </button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-6 mb-6\">\n                  <p className=\"text-gray-600\">\n                    Nenhuma regra inteligente configurada.\n                    Crie uma regra para começar a personalizar o bloqueio.\n                  </p>\n                </div>\n              )}\n\n              {/* Add new rule section */}\n              <div className=\"mt-6 border-t border-gray-200 pt-4\">\n                <h4 className=\"font-medium text-paz-blue-800 mb-3\">Adicionar Regra</h4>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <button \n                    onClick={handleCreateTimeRule}\n                    className=\"flex flex-col items-center justify-center p-3 bg-indigo-50 hover:bg-indigo-100 text-indigo-800 rounded transition\"\n                  >\n                    <span className=\"text-xl mb-1\">🕒</span>\n                    <span className=\"text-sm\">Horário</span>\n                  </button>\n                  <button \n                    onClick={handleCreateWhitelistRule}\n                    className=\"flex flex-col items-center justify-center p-3 bg-green-50 hover:bg-green-100 text-green-800 rounded transition\"\n                  >\n                    <span className=\"text-xl mb-1\">✅</span>\n                    <span className=\"text-sm\">Lista Branca</span>\n                  </button>\n                  <button \n                    onClick={handleCreateDurationRule}\n                    className=\"flex flex-col items-center justify-center p-3 bg-amber-50 hover:bg-amber-100 text-amber-800 rounded transition\"\n                  >\n                    <span className=\"text-xl mb-1\">⏱️</span>\n                    <span className=\"text-sm\">Duração</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SmartRulesCard;\n","/**\n * Perfis de Bloqueio Pré-configurados para o Quero Paz\n * \n * Este serviço permite criar e gerenciar modos de bloqueio pré-configurados\n * como \"Trabalho\", \"Sono\", \"Férias\" com regras específicas para cada um.\n */\n\nimport storage from '../storage';\nimport smartRules, { RULE_TYPES, RULE_STATUS } from './smartRules';\n\n// Tipos de perfis predefinidos\nexport const PROFILE_TYPES = {\n  SLEEP: 'sleep',        // Modo sono/noturno\n  WORK: 'work',          // Modo trabalho/foco\n  VACATION: 'vacation',  // Modo férias/descanso\n  MEETING: 'meeting',    // Modo reunião\n  CUSTOM: 'custom'       // Perfil personalizado\n};\n\n// Estados de perfil\nexport const PROFILE_STATUS = {\n  ACTIVE: 'active',\n  INACTIVE: 'inactive',\n  SCHEDULED: 'scheduled' // Ativação agendada\n};\n\n/**\n * Serviço de perfis de bloqueio\n */\nconst blockProfiles = {\n  /**\n   * Obtém todos os perfis configurados\n   * @returns {Promise<Array>} Lista de perfis\n   */\n  async getProfiles() {\n    const profiles = await storage.getItem('block_profiles');\n    return profiles || [];\n  },\n  \n  /**\n   * Verifica se existe algum perfil ativo\n   * @returns {Promise<Object|null>} Perfil ativo ou null\n   */\n  async getActiveProfile() {\n    const profiles = await this.getProfiles();\n    return profiles.find(profile => profile.status === PROFILE_STATUS.ACTIVE) || null;\n  },\n  \n  /**\n   * Cria um novo perfil de bloqueio\n   * @param {Object} profile - Dados do perfil\n   * @returns {Promise<Object>} Perfil criado\n   */\n  async createProfile(profile) {\n    const profiles = await this.getProfiles();\n    \n    // Gera um ID único para o perfil\n    const newProfile = {\n      ...profile,\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString(),\n      status: profile.status || PROFILE_STATUS.INACTIVE,\n      ruleIds: profile.ruleIds || []\n    };\n    \n    await storage.setItem('block_profiles', [...profiles, newProfile]);\n    return newProfile;\n  },\n  \n  /**\n   * Atualiza um perfil existente\n   * @param {string} profileId - ID do perfil\n   * @param {Object} updates - Dados a atualizar\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async updateProfile(profileId, updates) {\n    const profiles = await this.getProfiles();\n    const index = profiles.findIndex(p => p.id === profileId);\n    \n    if (index === -1) return false;\n    \n    profiles[index] = {\n      ...profiles[index],\n      ...updates,\n      updatedAt: new Date().toISOString()\n    };\n    \n    await storage.setItem('block_profiles', profiles);\n    return true;\n  },\n  \n  /**\n   * Exclui um perfil\n   * @param {string} profileId - ID do perfil\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async deleteProfile(profileId) {\n    const profiles = await this.getProfiles();\n    const newProfiles = profiles.filter(p => p.id !== profileId);\n    \n    if (newProfiles.length === profiles.length) return false;\n    \n    await storage.setItem('block_profiles', newProfiles);\n    return true;\n  },\n  \n  /**\n   * Ativa um perfil específico\n   * @param {string} profileId - ID do perfil\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async activateProfile(profileId) {\n    const profiles = await this.getProfiles();\n    \n    // Desativa todos os perfis primeiro\n    const updatedProfiles = profiles.map(p => ({\n      ...p,\n      status: p.id === profileId ? PROFILE_STATUS.ACTIVE : PROFILE_STATUS.INACTIVE\n    }));\n    \n    await storage.setItem('block_profiles', updatedProfiles);\n    \n    // Ativa as regras associadas a este perfil\n    const activeProfile = updatedProfiles.find(p => p.id === profileId);\n    if (activeProfile && activeProfile.ruleIds) {\n      for (const ruleId of activeProfile.ruleIds) {\n        await smartRules.updateRule(ruleId, { status: RULE_STATUS.ACTIVE });\n      }\n    }\n    \n    return true;\n  },\n  \n  /**\n   * Desativa todos os perfis\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async deactivateAllProfiles() {\n    const profiles = await this.getProfiles();\n    \n    // Marca todos os perfis como inativos\n    const updatedProfiles = profiles.map(p => ({\n      ...p,\n      status: PROFILE_STATUS.INACTIVE\n    }));\n    \n    await storage.setItem('block_profiles', updatedProfiles);\n    return true;\n  },\n  \n  /**\n   * Cria o perfil \"Modo Sono\" com configurações padrão\n   * @returns {Promise<Object>} Perfil criado\n   */\n  async createSleepProfile() {\n    // Cria a regra de horário noturno\n    const timeRule = await smartRules.createTimeRule(22, 7, [0, 1, 2, 3, 4, 5, 6], 'Horário de sono');\n    \n    // Cria a regra de lista branca para contatos de emergência\n    const whitelistRule = await smartRules.createWhitelistRule([], 'Contatos de emergência');\n    \n    // Cria o perfil com as regras\n    return this.createProfile({\n      name: 'Modo Sono',\n      type: PROFILE_TYPES.SLEEP,\n      description: 'Bloqueia todas as chamadas durante a noite, exceto contatos de emergência',\n      icon: 'moon',\n      color: '#1e40af', // Azul escuro\n      ruleIds: [timeRule.id, whitelistRule.id],\n      status: PROFILE_STATUS.INACTIVE\n    });\n  },\n  \n  /**\n   * Cria o perfil \"Modo Trabalho\" com configurações padrão\n   * @returns {Promise<Object>} Perfil criado\n   */\n  async createWorkProfile() {\n    // Cria regra para horário comercial (8h-18h, seg-sex)\n    const timeRule = await smartRules.createTimeRule(8, 18, [1, 2, 3, 4, 5], 'Horário de trabalho');\n    \n    // Cria regra para lista branca (contatos importantes do trabalho)\n    const whitelistRule = await smartRules.createWhitelistRule([], 'Contatos de trabalho');\n    \n    // Cria o perfil\n    return this.createProfile({\n      name: 'Modo Trabalho',\n      type: PROFILE_TYPES.WORK,\n      description: 'Filtra chamadas durante o horário de trabalho, permitindo apenas contatos importantes',\n      icon: 'briefcase',\n      color: '#15803d', // Verde escuro\n      ruleIds: [timeRule.id, whitelistRule.id],\n      status: PROFILE_STATUS.INACTIVE\n    });\n  },\n  \n  /**\n   * Cria o perfil \"Modo Férias\" com configurações padrão\n   * @returns {Promise<Object>} Perfil criado\n   */\n  async createVacationProfile() {\n    // Cria regra para lista branca (apenas família e amigos próximos)\n    const whitelistRule = await smartRules.createWhitelistRule([], 'Família e amigos próximos');\n    \n    // Cria regra para bloquear chamadas repetitivas (anti-spam)\n    const durationRule = await smartRules.createDurationRule(5, 2, 'Anti-spam férias');\n    \n    // Cria o perfil\n    return this.createProfile({\n      name: 'Modo Férias',\n      type: PROFILE_TYPES.VACATION,\n      description: 'Bloqueio rigoroso de chamadas, permitindo apenas contatos mais próximos',\n      icon: 'beach',\n      color: '#b91c1c', // Vermelho\n      ruleIds: [whitelistRule.id, durationRule.id],\n      status: PROFILE_STATUS.INACTIVE\n    });\n  },\n  \n  /**\n   * Cria o perfil \"Modo Reunião\" com configurações padrão\n   * @returns {Promise<Object>} Perfil criado\n   */\n  async createMeetingProfile() {\n    // Cria regra para lista branca (apenas contatos críticos)\n    const whitelistRule = await smartRules.createWhitelistRule([], 'Contatos críticos');\n    \n    // Cria o perfil\n    return this.createProfile({\n      name: 'Modo Reunião',\n      type: PROFILE_TYPES.MEETING,\n      description: 'Bloqueio temporário para reuniões importantes',\n      icon: 'users',\n      color: '#7f1d1d', // Vermelho escuro\n      ruleIds: [whitelistRule.id],\n      status: PROFILE_STATUS.INACTIVE,\n      duration: 60 // Duração padrão de 60 minutos\n    });\n  },\n  \n  /**\n   * Programa a ativação e desativação automática de um perfil\n   * @param {string} profileId - ID do perfil\n   * @param {Date} startDate - Data/hora de início\n   * @param {Date} endDate - Data/hora de fim\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async scheduleProfile(profileId, startDate, endDate) {\n    const profiles = await this.getProfiles();\n    const index = profiles.findIndex(p => p.id === profileId);\n    \n    if (index === -1) return false;\n    \n    // Atualiza o perfil com informações de agendamento\n    profiles[index] = {\n      ...profiles[index],\n      status: PROFILE_STATUS.SCHEDULED,\n      schedule: {\n        startDate: startDate.toISOString(),\n        endDate: endDate.toISOString(),\n        active: true\n      },\n      updatedAt: new Date().toISOString()\n    };\n    \n    await storage.setItem('block_profiles', profiles);\n    return true;\n  },\n  \n  /**\n   * Verifica e processa perfis agendados\n   * Esta função seria chamada periodicamente ou no carregamento do app\n   * @returns {Promise<void>}\n   */\n  async processScheduledProfiles() {\n    const profiles = await this.getProfiles();\n    const now = new Date();\n    let updated = false;\n    \n    for (let i = 0; i < profiles.length; i++) {\n      const profile = profiles[i];\n      \n      if (profile.status === PROFILE_STATUS.SCHEDULED && profile.schedule && profile.schedule.active) {\n        const startDate = new Date(profile.schedule.startDate);\n        const endDate = new Date(profile.schedule.endDate);\n        \n        // Verifica se é hora de ativar\n        if (now >= startDate && now < endDate && profile.status !== PROFILE_STATUS.ACTIVE) {\n          profiles[i] = {\n            ...profile,\n            status: PROFILE_STATUS.ACTIVE\n          };\n          updated = true;\n          \n          // Ativa as regras associadas\n          if (profile.ruleIds) {\n            for (const ruleId of profile.ruleIds) {\n              await smartRules.updateRule(ruleId, { status: RULE_STATUS.ACTIVE });\n            }\n          }\n        }\n        // Verifica se é hora de desativar\n        else if (now >= endDate && profile.status !== PROFILE_STATUS.INACTIVE) {\n          profiles[i] = {\n            ...profile,\n            status: PROFILE_STATUS.INACTIVE,\n            schedule: {\n              ...profile.schedule,\n              active: false\n            }\n          };\n          updated = true;\n          \n          // Desativa as regras, se necessário\n          if (profile.ruleIds) {\n            for (const ruleId of profile.ruleIds) {\n              await smartRules.updateRule(ruleId, { status: RULE_STATUS.INACTIVE });\n            }\n          }\n        }\n      }\n    }\n    \n    if (updated) {\n      await storage.setItem('block_profiles', profiles);\n    }\n  }\n};\n\nexport default blockProfiles;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport blockProfiles, { PROFILE_TYPES, PROFILE_STATUS } from '../../services/ai/blockProfiles';\n\n/**\n * Componente que exibe e gerencia perfis de bloqueio\n */\nconst BlockProfilesCard = () => {\n  const [profiles, setProfiles] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [expanded, setExpanded] = useState(false);\n  const [activeProfile, setActiveProfile] = useState(null);\n\n  // Carrega perfis existentes\n  const loadProfiles = useCallback(async () => {\n    setLoading(true);\n    try {\n      const profilesList = await blockProfiles.getProfiles();\n      setProfiles(profilesList);\n      \n      // Identifica o perfil ativo, se houver\n      const active = profilesList.find(p => p.status === PROFILE_STATUS.ACTIVE);\n      setActiveProfile(active || null);\n    } catch (error) {\n      console.error('Erro ao carregar perfis:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadProfiles();\n  }, [loadProfiles]);\n\n  // Ativa um perfil específico\n  const handleActivateProfile = async (profileId) => {\n    try {\n      await blockProfiles.activateProfile(profileId);\n      loadProfiles(); // Recarrega a lista para refletir a mudança\n    } catch (error) {\n      console.error('Erro ao ativar perfil:', error);\n    }\n  };\n\n  // Desativa todos os perfis\n  const handleDeactivateAll = async () => {\n    try {\n      await blockProfiles.deactivateAllProfiles();\n      loadProfiles(); // Recarrega a lista para refletir a mudança\n    } catch (error) {\n      console.error('Erro ao desativar perfis:', error);\n    }\n  };\n\n  // Cria um novo perfil predefinido\n  const handleCreateProfile = async (type) => {\n    try {\n      let newProfile;\n      \n      switch (type) {\n        case PROFILE_TYPES.SLEEP:\n          newProfile = await blockProfiles.createSleepProfile();\n          break;\n        case PROFILE_TYPES.WORK:\n          newProfile = await blockProfiles.createWorkProfile();\n          break;\n        case PROFILE_TYPES.VACATION:\n          newProfile = await blockProfiles.createVacationProfile();\n          break;\n        case PROFILE_TYPES.MEETING:\n          newProfile = await blockProfiles.createMeetingProfile();\n          break;\n        default:\n          return;\n      }\n      \n      loadProfiles(); // Recarrega a lista para mostrar o novo perfil\n    } catch (error) {\n      console.error('Erro ao criar perfil:', error);\n    }\n  };\n\n  // Renderiza ícone para o tipo de perfil\n  const renderProfileIcon = (type) => {\n    switch (type) {\n      case PROFILE_TYPES.SLEEP:\n        return <span className=\"text-lg\">🌙</span>;\n      case PROFILE_TYPES.WORK:\n        return <span className=\"text-lg\">💼</span>;\n      case PROFILE_TYPES.VACATION:\n        return <span className=\"text-lg\">🏖️</span>;\n      case PROFILE_TYPES.MEETING:\n        return <span className=\"text-lg\">👥</span>;\n      default:\n        return <span className=\"text-lg\">📱</span>;\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-paz shadow-paz overflow-hidden transition-all mb-4\">\n      <div \n        className=\"bg-paz-blue-50 p-4 flex justify-between items-center cursor-pointer border-b border-paz-blue-100\"\n        onClick={() => setExpanded(!expanded)}\n      >\n        <div className=\"flex items-center\">\n          <div className=\"text-paz-blue-600 p-2 rounded-full bg-paz-blue-100 mr-3\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n            </svg>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-lg text-paz-blue-800\">Perfis de Bloqueio</h3>\n            <p className=\"text-sm text-paz-blue-600\">\n              {activeProfile ? `Ativo: ${activeProfile.name}` : 'Nenhum perfil ativo'}\n            </p>\n          </div>\n        </div>\n        <div className=\"text-paz-blue-600\">\n          <svg \n            xmlns=\"http://www.w3.org/2000/svg\" \n            className={`h-6 w-6 transition-transform ${expanded ? 'rotate-180' : ''}`} \n            fill=\"none\" \n            viewBox=\"0 0 24 24\" \n            stroke=\"currentColor\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </div>\n      </div>\n\n      {expanded && (\n        <div className=\"p-4\">\n          {loading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-paz-blue-600\"></div>\n            </div>\n          ) : (\n            <div>\n              {/* Lista de perfis existentes */}\n              {profiles.length > 0 ? (\n                <div className=\"space-y-3 mb-6\">\n                  {profiles.map((profile) => (\n                    <div \n                      key={profile.id} \n                      className={`p-3 rounded-lg border ${\n                        profile.status === PROFILE_STATUS.ACTIVE \n                          ? 'border-paz-blue-500 bg-paz-blue-50' \n                          : 'border-gray-200 bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex items-center\">\n                          {renderProfileIcon(profile.type)}\n                          <div className=\"ml-2\">\n                            <h4 className=\"font-medium\">{profile.name}</h4>\n                            <p className=\"text-sm text-gray-600\">{profile.description}</p>\n                          </div>\n                        </div>\n                        \n                        {/* Status Badge */}\n                        {profile.status === PROFILE_STATUS.ACTIVE && (\n                          <span className=\"bg-paz-green-100 text-paz-green-800 text-xs px-2 py-1 rounded-full\">\n                            Ativo\n                          </span>\n                        )}\n                        {profile.status === PROFILE_STATUS.SCHEDULED && (\n                          <span className=\"bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded-full\">\n                            Agendado\n                          </span>\n                        )}\n                      </div>\n                      \n                      {/* Actions */}\n                      <div className=\"mt-3 flex justify-end space-x-2\">\n                        {profile.status !== PROFILE_STATUS.ACTIVE && (\n                          <button \n                            onClick={() => handleActivateProfile(profile.id)}\n                            className=\"px-3 py-1 bg-paz-blue-600 hover:bg-paz-blue-700 text-white text-sm rounded transition\"\n                          >\n                            Ativar\n                          </button>\n                        )}\n                        {profile.status === PROFILE_STATUS.ACTIVE && (\n                          <button \n                            onClick={handleDeactivateAll}\n                            className=\"px-3 py-1 bg-paz-red-600 hover:bg-paz-red-700 text-white text-sm rounded transition\"\n                          >\n                            Desativar\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-6 mb-6\">\n                  <p className=\"text-gray-600\">\n                    Nenhum perfil de bloqueio configurado.\n                    Crie um perfil para começar.\n                  </p>\n                </div>\n              )}\n\n              {/* Add new profile section */}\n              <div className=\"mt-6 border-t border-gray-200 pt-4\">\n                <h4 className=\"font-medium text-paz-blue-800 mb-3\">Adicionar Perfil</h4>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <button \n                    onClick={() => handleCreateProfile(PROFILE_TYPES.SLEEP)}\n                    className=\"flex items-center justify-center p-3 bg-indigo-50 hover:bg-indigo-100 text-indigo-800 rounded transition\"\n                  >\n                    <span className=\"mr-2\">🌙</span>\n                    <span>Modo Sono</span>\n                  </button>\n                  <button \n                    onClick={() => handleCreateProfile(PROFILE_TYPES.WORK)}\n                    className=\"flex items-center justify-center p-3 bg-green-50 hover:bg-green-100 text-green-800 rounded transition\"\n                  >\n                    <span className=\"mr-2\">💼</span>\n                    <span>Modo Trabalho</span>\n                  </button>\n                  <button \n                    onClick={() => handleCreateProfile(PROFILE_TYPES.VACATION)}\n                    className=\"flex items-center justify-center p-3 bg-red-50 hover:bg-red-100 text-red-800 rounded transition\"\n                  >\n                    <span className=\"mr-2\">🏖️</span>\n                    <span>Modo Férias</span>\n                  </button>\n                  <button \n                    onClick={() => handleCreateProfile(PROFILE_TYPES.MEETING)}\n                    className=\"flex items-center justify-center p-3 bg-amber-50 hover:bg-amber-100 text-amber-800 rounded transition\"\n                  >\n                    <span className=\"mr-2\">👥</span>\n                    <span>Modo Reunião</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BlockProfilesCard;\n","/**\n * Sistema de Blacklist Compartilhada para o Quero Paz\n * \n * Este serviço permite integração com uma base de dados comunitária\n * de números indesejados, aumentando a proteção colaborativa.\n */\n\nimport storage from '../storage';\n\n// URL base da API (simulada - em produção, seria um endpoint real)\nconst API_BASE_URL = 'https://api.queropaz.com.br/v1';\n\n// Cache local de números bloqueados\nlet cachedBlacklist = null;\nlet lastFetchTime = 0;\nconst CACHE_TTL = 12 * 60 * 60 * 1000; // 12 horas em ms\n\n/**\n * Serviço de blacklist compartilhada\n */\nconst sharedBlacklist = {\n  /**\n   * Inicializa o sistema de blacklist\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    // Carrega blacklist do armazenamento local para uso offline\n    try {\n      const savedList = await storage.getItem('shared_blacklist');\n      if (savedList) {\n        cachedBlacklist = savedList.data;\n        lastFetchTime = savedList.timestamp;\n      }\n    } catch (error) {\n      console.error('Erro ao carregar blacklist compartilhada:', error);\n    }\n  },\n  \n  /**\n   * Verifica se um número está na blacklist compartilhada\n   * @param {string} phoneNumber - Número a verificar\n   * @returns {Promise<Object>} Resultado da verificação\n   */\n  async checkNumber(phoneNumber) {\n    // Garante que a blacklist está atualizada\n    await this.ensureUpdated();\n    \n    if (!cachedBlacklist) return { isBlocked: false };\n    \n    // Verifica coincidência exata\n    const exactMatch = cachedBlacklist.find(item => \n      item.phoneNumber === phoneNumber || \n      item.phoneNumber === phoneNumber.replace(/\\D/g, '')\n    );\n    \n    if (exactMatch) {\n      return {\n        isBlocked: true,\n        reason: exactMatch.reason || 'Número reportado pela comunidade',\n        reportCount: exactMatch.reportCount || 1,\n        category: exactMatch.category || 'desconhecido',\n        confidence: exactMatch.confidence || 'medium'\n      };\n    }\n    \n    // Verifica coincidência por prefixo (para operadoras ou regiões conhecidas)\n    const cleanNumber = phoneNumber.replace(/\\D/g, '');\n    const prefixMatch = cachedBlacklist.find(item => \n      item.type === 'prefix' && \n      cleanNumber.startsWith(item.prefix)\n    );\n    \n    if (prefixMatch) {\n      return {\n        isBlocked: true,\n        reason: prefixMatch.reason || 'Prefixo reportado pela comunidade',\n        reportCount: prefixMatch.reportCount || 1,\n        category: prefixMatch.category || 'desconhecido',\n        confidence: 'low' // Confiança mais baixa para coincidências de prefixo\n      };\n    }\n    \n    return { isBlocked: false };\n  },\n  \n  /**\n   * Sincroniza a blacklist com o servidor (ou simula, neste caso)\n   * @param {boolean} force - Força a atualização mesmo que o cache seja recente\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async syncWithServer(force = false) {\n    const now = Date.now();\n    \n    // Só atualiza se o cache estiver vencido ou se for forçado\n    if (!force && cachedBlacklist && (now - lastFetchTime) < CACHE_TTL) {\n      return true;\n    }\n    \n    try {\n      // Em um app real, faríamos uma chamada API\n      // Neste protótipo, simulamos com dados estáticos\n      \n      // Simula uma latência de rede\n      await new Promise(resolve => setTimeout(resolve, 600));\n      \n      // Dados simulados de blacklist\n      const mockData = [\n        {\n          phoneNumber: '551145678901',\n          reason: 'Telemarketing agressivo',\n          reportCount: 42,\n          category: 'telemarketing',\n          confidence: 'high',\n          firstReported: '2023-01-15'\n        },\n        {\n          phoneNumber: '11983745620',\n          reason: 'Golpe financeiro',\n          reportCount: 27,\n          category: 'scam',\n          confidence: 'high',\n          firstReported: '2023-03-22'\n        },\n        {\n          type: 'prefix',\n          prefix: '11994',\n          reason: 'Operadora associada a spam',\n          reportCount: 89,\n          category: 'spam',\n          confidence: 'medium',\n          firstReported: '2023-02-10'\n        },\n        // Mais exemplos seriam adicionados aqui...\n      ];\n      \n      // Atualiza o cache\n      cachedBlacklist = mockData;\n      lastFetchTime = now;\n      \n      // Salva no armazenamento local para uso offline\n      await storage.setItem('shared_blacklist', {\n        data: mockData,\n        timestamp: now,\n        version: '1.0'\n      });\n      \n      console.log('Blacklist compartilhada atualizada com sucesso');\n      return true;\n    } catch (error) {\n      console.error('Erro ao sincronizar blacklist compartilhada:', error);\n      return false;\n    }\n  },\n  \n  /**\n   * Garante que a blacklist está atualizada\n   * @returns {Promise<void>}\n   */\n  async ensureUpdated() {\n    if (!cachedBlacklist || (Date.now() - lastFetchTime) > CACHE_TTL) {\n      await this.syncWithServer();\n    }\n  },\n  \n  /**\n   * Reporta um número para a blacklist comunitária\n   * @param {string} phoneNumber - Número a reportar\n   * @param {string} reason - Motivo do reporte\n   * @param {string} category - Categoria (spam, scam, telemarketing, etc)\n   * @returns {Promise<boolean>} Sucesso da operação\n   */\n  async reportNumber(phoneNumber, reason, category) {\n    try {\n      // Em um app real, faríamos uma chamada POST para a API\n      // Aqui apenas simulamos a operação\n      \n      console.log(`Número ${phoneNumber} reportado como ${category}: ${reason}`);\n      \n      // Simula latência de rede\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // Atualiza o cache local para feedback imediato ao usuário\n      if (cachedBlacklist) {\n        const existing = cachedBlacklist.find(item => item.phoneNumber === phoneNumber);\n        \n        if (existing) {\n          // Incrementa contagem de reports para número existente\n          existing.reportCount = (existing.reportCount || 1) + 1;\n          existing.reason = reason || existing.reason;\n          existing.category = category || existing.category;\n        } else {\n          // Adiciona novo número à lista\n          cachedBlacklist.push({\n            phoneNumber,\n            reason,\n            category,\n            reportCount: 1,\n            confidence: 'low', // Começa com confiança baixa\n            firstReported: new Date().toISOString().split('T')[0]\n          });\n        }\n        \n        // Salva a versão atualizada localmente\n        await storage.setItem('shared_blacklist', {\n          data: cachedBlacklist,\n          timestamp: lastFetchTime,\n          version: '1.0'\n        });\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Erro ao reportar número:', error);\n      return false;\n    }\n  },\n  \n  /**\n   * Obtém estatísticas da blacklist\n   * @returns {Promise<Object>} Estatísticas\n   */\n  async getStats() {\n    await this.ensureUpdated();\n    \n    if (!cachedBlacklist) return { total: 0 };\n    \n    // Calcula estatísticas\n    const categories = {};\n    let totalReportCount = 0;\n    \n    cachedBlacklist.forEach(item => {\n      // Contabiliza por categoria\n      const category = item.category || 'unknown';\n      categories[category] = (categories[category] || 0) + 1;\n      \n      // Soma relatórios totais\n      totalReportCount += (item.reportCount || 1);\n    });\n    \n    return {\n      total: cachedBlacklist.length,\n      lastUpdated: new Date(lastFetchTime).toISOString(),\n      totalReportCount,\n      categories,\n      prefixRules: cachedBlacklist.filter(item => item.type === 'prefix').length\n    };\n  }\n};\n\nexport default sharedBlacklist;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport sharedBlacklist from '../../services/ai/sharedBlacklist';\n\n/**\n * Componente que exibe e gerencia a blacklist compartilhada\n */\nconst SharedBlacklistCard = () => {\n  const [loading, setLoading] = useState(true);\n  const [stats, setStats] = useState(null);\n  const [expanded, setExpanded] = useState(false);\n  const [searchNumber, setSearchNumber] = useState('');\n  const [searchResult, setSearchResult] = useState(null);\n  const [reportForm, setReportForm] = useState({\n    phoneNumber: '',\n    reason: '',\n    category: 'spam'\n  });\n  const [isReporting, setIsReporting] = useState(false);\n  const [showReportForm, setShowReportForm] = useState(false);\n\n  // Inicializa o componente\n  useEffect(() => {\n    const initialize = async () => {\n      await sharedBlacklist.initialize();\n      loadStats();\n    };\n    initialize();\n  }, []);\n\n  // Carrega estatísticas da blacklist\n  const loadStats = useCallback(async () => {\n    setLoading(true);\n    try {\n      const blacklistStats = await sharedBlacklist.getStats();\n      setStats(blacklistStats);\n    } catch (error) {\n      console.error('Erro ao carregar estatísticas:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Busca um número na blacklist\n  const handleSearch = async () => {\n    if (!searchNumber || searchNumber.length < 4) {\n      setSearchResult({ error: 'Digite ao menos 4 dígitos do número' });\n      return;\n    }\n    \n    setLoading(true);\n    try {\n      const result = await sharedBlacklist.checkNumber(searchNumber);\n      setSearchResult(result);\n    } catch (error) {\n      console.error('Erro ao verificar número:', error);\n      setSearchResult({ error: 'Erro ao verificar número' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reporta um número para a blacklist\n  const handleReport = async (e) => {\n    e.preventDefault();\n    \n    if (!reportForm.phoneNumber || !reportForm.reason) {\n      alert('Preencha todos os campos obrigatórios');\n      return;\n    }\n    \n    setIsReporting(true);\n    try {\n      await sharedBlacklist.reportNumber(\n        reportForm.phoneNumber,\n        reportForm.reason,\n        reportForm.category\n      );\n      \n      // Reseta o formulário e recarrega estatísticas\n      setReportForm({\n        phoneNumber: '',\n        reason: '',\n        category: 'spam'\n      });\n      setShowReportForm(false);\n      loadStats();\n      \n      alert('Número reportado com sucesso!');\n    } catch (error) {\n      console.error('Erro ao reportar número:', error);\n      alert('Erro ao reportar número');\n    } finally {\n      setIsReporting(false);\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-paz shadow-paz overflow-hidden transition-all mb-4\">\n      <div \n        className=\"bg-paz-blue-50 p-4 flex justify-between items-center cursor-pointer border-b border-paz-blue-100\"\n        onClick={() => setExpanded(!expanded)}\n      >\n        <div className=\"flex items-center\">\n          <div className=\"text-paz-blue-600 p-2 rounded-full bg-paz-blue-100 mr-3\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n            </svg>\n          </div>\n          <div>\n            <h3 className=\"font-semibold text-lg text-paz-blue-800\">Blacklist Comunitária</h3>\n            <p className=\"text-sm text-paz-blue-600\">\n              {stats ? `${stats.total} números bloqueados` : 'Carregando...'}\n            </p>\n          </div>\n        </div>\n        <div className=\"text-paz-blue-600\">\n          <svg \n            xmlns=\"http://www.w3.org/2000/svg\" \n            className={`h-6 w-6 transition-transform ${expanded ? 'rotate-180' : ''}`} \n            fill=\"none\" \n            viewBox=\"0 0 24 24\" \n            stroke=\"currentColor\"\n          >\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n          </svg>\n        </div>\n      </div>\n\n      {expanded && (\n        <div className=\"p-4\">\n          {loading && !stats ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-paz-blue-600\"></div>\n            </div>\n          ) : (\n            <div>\n              {/* Estatísticas */}\n              <div className=\"bg-gray-50 p-4 rounded-lg mb-4\">\n                <h4 className=\"font-medium text-gray-700 mb-2\">Resumo da Blacklist</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"bg-white p-3 rounded shadow-sm\">\n                    <div className=\"text-sm text-gray-500\">Números Bloqueados</div>\n                    <div className=\"text-xl font-semibold text-paz-blue-700\">{stats?.total || 0}</div>\n                  </div>\n                  <div className=\"bg-white p-3 rounded shadow-sm\">\n                    <div className=\"text-sm text-gray-500\">Total de Denúncias</div>\n                    <div className=\"text-xl font-semibold text-paz-red-700\">{stats?.totalReportCount || 0}</div>\n                  </div>\n                </div>\n                <div className=\"mt-3 text-xs text-gray-500 text-right\">\n                  Última atualização: {stats?.lastUpdated \n                    ? new Date(stats.lastUpdated).toLocaleString() \n                    : 'Desconhecida'}\n                </div>\n              </div>\n              \n              {/* Verificar número */}\n              <div className=\"mb-6\">\n                <h4 className=\"font-medium text-gray-700 mb-2\">Verificar Número</h4>\n                <div className=\"flex space-x-2\">\n                  <input\n                    type=\"text\"\n                    className=\"flex-1 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-paz-blue-500\"\n                    placeholder=\"Digite um número para verificar\"\n                    value={searchNumber}\n                    onChange={(e) => setSearchNumber(e.target.value)}\n                  />\n                  <button\n                    onClick={handleSearch}\n                    disabled={loading}\n                    className=\"px-4 py-2 bg-paz-blue-600 hover:bg-paz-blue-700 text-white rounded disabled:opacity-50\"\n                  >\n                    {loading ? 'Verificando...' : 'Verificar'}\n                  </button>\n                </div>\n                \n                {/* Resultado da busca */}\n                {searchResult && (\n                  <div className={`mt-3 p-3 rounded ${\n                    searchResult.error ? 'bg-paz-red-50 text-paz-red-800' : \n                      searchResult.isBlocked ? 'bg-paz-red-50 text-paz-red-800' : 'bg-paz-green-50 text-paz-green-800'\n                  }`}>\n                    {searchResult.error ? (\n                      <p>{searchResult.error}</p>\n                    ) : searchResult.isBlocked ? (\n                      <div>\n                        <p className=\"font-medium\">Número bloqueado na blacklist comunitária</p>\n                        <p className=\"text-sm\">{searchResult.reason}</p>\n                        <div className=\"mt-1 flex space-x-2 text-xs\">\n                          <span className=\"bg-paz-red-200 px-2 py-1 rounded\">\n                            {searchResult.reportCount} denúncias\n                          </span>\n                          <span className=\"bg-paz-red-200 px-2 py-1 rounded\">\n                            Categoria: {searchResult.category}\n                          </span>\n                        </div>\n                      </div>\n                    ) : (\n                      <p>Número não encontrado na blacklist comunitária</p>\n                    )}\n                  </div>\n                )}\n              </div>\n              \n              {/* Denunciar número */}\n              <div>\n                {!showReportForm ? (\n                  <button\n                    onClick={() => setShowReportForm(true)}\n                    className=\"w-full py-2 px-4 bg-paz-red-600 hover:bg-paz-red-700 text-white rounded\"\n                  >\n                    Denunciar um número\n                  </button>\n                ) : (\n                  <div className=\"border border-gray-200 rounded-lg p-4\">\n                    <h4 className=\"font-medium text-gray-700 mb-3\">Denunciar Número</h4>\n                    <form onSubmit={handleReport}>\n                      <div className=\"mb-3\">\n                        <label className=\"block text-gray-700 text-sm font-medium mb-1\">\n                          Número de Telefone*\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-paz-blue-500\"\n                          placeholder=\"Ex: 11987654321\"\n                          value={reportForm.phoneNumber}\n                          onChange={(e) => setReportForm({...reportForm, phoneNumber: e.target.value})}\n                          required\n                        />\n                      </div>\n                      \n                      <div className=\"mb-3\">\n                        <label className=\"block text-gray-700 text-sm font-medium mb-1\">\n                          Motivo da Denúncia*\n                        </label>\n                        <input\n                          type=\"text\"\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-paz-blue-500\"\n                          placeholder=\"Ex: Telemarketing insistente\"\n                          value={reportForm.reason}\n                          onChange={(e) => setReportForm({...reportForm, reason: e.target.value})}\n                          required\n                        />\n                      </div>\n                      \n                      <div className=\"mb-4\">\n                        <label className=\"block text-gray-700 text-sm font-medium mb-1\">\n                          Categoria\n                        </label>\n                        <select\n                          className=\"w-full px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-paz-blue-500\"\n                          value={reportForm.category}\n                          onChange={(e) => setReportForm({...reportForm, category: e.target.value})}\n                        >\n                          <option value=\"spam\">Spam/Publicidade</option>\n                          <option value=\"telemarketing\">Telemarketing</option>\n                          <option value=\"scam\">Golpe/Fraude</option>\n                          <option value=\"robocall\">Ligação Automática</option>\n                          <option value=\"harassment\">Assédio</option>\n                          <option value=\"other\">Outro</option>\n                        </select>\n                      </div>\n                      \n                      <div className=\"flex space-x-2 justify-end\">\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowReportForm(false)}\n                          className=\"px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded\"\n                        >\n                          Cancelar\n                        </button>\n                        <button\n                          type=\"submit\"\n                          disabled={isReporting}\n                          className=\"px-4 py-2 bg-paz-red-600 hover:bg-paz-red-700 text-white rounded disabled:opacity-50\"\n                        >\n                          {isReporting ? 'Enviando...' : 'Denunciar'}\n                        </button>\n                      </div>\n                    </form>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SharedBlacklistCard;\n","import React, { useState, useEffect } from 'react';\nimport PatternAnalysisCard from './PatternAnalysisCard';\nimport SmartRulesCard from './SmartRulesCard';\nimport BlockProfilesCard from './BlockProfilesCard';\nimport SharedBlacklistCard from './SharedBlacklistCard';\nimport smartRules from '../../services/ai/smartRules';\nimport sharedBlacklist from '../../services/ai/sharedBlacklist';\n\n/**\n * Painel principal que integra todos os recursos avançados de proteção\n */\nconst AdvancedProtectionPanel = () => {\n  const [initialized, setInitialized] = useState(false);\n\n  // Inicializa todos os serviços de proteção avançada\n  useEffect(() => {\n    const initializeServices = async () => {\n      try {\n        // Inicializa serviços em paralelo\n        await Promise.all([\n          sharedBlacklist.initialize(),\n          // Outros serviços que precisem de inicialização\n        ]);\n        \n        setInitialized(true);\n      } catch (error) {\n        console.error('Erro ao inicializar serviços de proteção avançada:', error);\n      }\n    };\n    \n    initializeServices();\n  }, []);\n  \n  // Manipula a aplicação de uma recomendação de análise de padrões\n  const handleApplyRecommendation = async (recommendation) => {\n    try {\n      let result;\n      \n      // Aplica a recomendação com base no tipo\n      switch (recommendation.action) {\n        case 'block_number':\n          // Bloqueio de número específico\n          console.log(`Bloqueando número: ${recommendation.value}`);\n          // Implementação real: adicionar à lista de bloqueio\n          break;\n          \n        case 'block_time':\n          // Cria regra baseada em horário\n          const hour = parseInt(recommendation.value.split(':')[0], 10);\n          result = await smartRules.createTimeRule(\n            hour, \n            (hour + 4) % 24, // Período de 4 horas por padrão\n            [0, 1, 2, 3, 4, 5, 6], // Todos os dias\n            `Bloqueio horário ${recommendation.value}`\n          );\n          console.log(`Regra de horário criada: ${result.id}`);\n          break;\n          \n        case 'block_prefix':\n          // Criaria uma regra baseada em prefixo (ainda não implementado)\n          console.log(`Bloqueando prefixo: ${recommendation.value}`);\n          // Implementação real: criar regra de prefixo\n          break;\n          \n        default:\n          console.log('Tipo de recomendação não reconhecido');\n      }\n      \n      // Exibe confirmação\n      alert(`Recomendação aplicada com sucesso!`);\n    } catch (error) {\n      console.error('Erro ao aplicar recomendação:', error);\n      alert('Não foi possível aplicar a recomendação.');\n    }\n  };\n\n  return (\n    <div className=\"max-w-3xl mx-auto space-y-6 p-4\">\n      <div className=\"bg-white rounded-paz shadow-paz p-6\">\n        <h2 className=\"text-2xl font-bold text-paz-blue-800 mb-2\">Proteção Avançada</h2>\n        <p className=\"text-gray-600 mb-6\">\n          Ferramentas inteligentes para maximizar sua proteção contra chamadas indesejadas.\n        </p>\n        \n        {!initialized ? (\n          <div className=\"flex flex-col items-center justify-center py-10\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-paz-blue-600 mb-4\"></div>\n            <p className=\"text-gray-600\">Inicializando recursos avançados...</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Cartão de análise de padrões */}\n            <PatternAnalysisCard onApplyRecommendation={handleApplyRecommendation} />\n            \n            {/* Cartão de perfis de bloqueio */}\n            <BlockProfilesCard />\n            \n            {/* Cartão de regras inteligentes */}\n            <SmartRulesCard />\n            \n            {/* Cartão de blacklist compartilhada */}\n            <SharedBlacklistCard />\n          </div>\n        )}\n      </div>\n      \n      <div className=\"bg-white rounded-paz shadow-paz p-6\">\n        <h3 className=\"font-semibold text-lg text-paz-blue-800 mb-3\">Dicas de Proteção</h3>\n        <ul className=\"space-y-2 text-gray-700\">\n          <li className=\"flex items-start\">\n            <span className=\"text-paz-blue-600 mr-2\">✓</span>\n            <span>Utilize perfis de bloqueio para diferentes situações do dia a dia</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"text-paz-blue-600 mr-2\">✓</span>\n            <span>Configure regras de horário para períodos de descanso e trabalho</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"text-paz-blue-600 mr-2\">✓</span>\n            <span>Adicione seus contatos importantes à lista branca para nunca perder chamadas importantes</span>\n          </li>\n          <li className=\"flex items-start\">\n            <span className=\"text-paz-blue-600 mr-2\">✓</span>\n            <span>Reporte números indesejados para contribuir com a comunidade</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default AdvancedProtectionPanel;\n"],"names":["analyzeFrequencyPatterns","phoneNumbers","storage","getSilencedCalls","map","call","includes","split","trim","frequency","forEach","number","Object","keys","filter","phoneNumber","confidence","Math","min","suggestedAction","analyzeTimePatterns","silencedCalls","timePatterns","hourlyDistribution","Array","fill","timeMatch","match","hour","parseInt","push","analyzePrefixPatterns","prefixPatterns","replace","length","prefix2","substring","prefix3","prefix","sort","a","b","generateBlockingRecommendations","frequencyPatterns","Promise","all","this","pattern","type","value","reason","concat","action","p","_ref","onApplyRecommendation","loading","setLoading","useState","recommendations","setRecommendations","expanded","setExpanded","loadRecommendations","useCallback","async","results","patternAnalysis","error","console","useEffect","_jsxs","className","children","onClick","_jsx","xmlns","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","slice","rec","index","confidenceLabel","text","class","typeLabel","icon","getTypeLabel","handleApply","recommendation","RULE_TYPES","RULE_STATUS","getRules","getItem","addRule","rule","rules","newRule","_objectSpread","id","Date","now","toString","createdAt","toISOString","status","setItem","updateRule","ruleId","updates","findIndex","updatedAt","deleteRule","newRules","createTimeRule","startHour","endHour","daysOfWeek","name","config","createWhitelistRule","createDurationRule","maxDuration","minFrequency","timeWindow","evaluateCall","activeRules","whitelistRules","currentHour","getHours","currentDay","getDay","startsWith","shortCalls","getRecentCallsByNumber","c","duration","getCallHistory","callTime","time","getTime","generateRuleRecommendations","description","SmartRulesCard","setRules","editingRule","setEditingRule","loadRules","rulesList","smartRules","renderRuleIcon","formatRuleDescription","_rule$config$phoneNum","count","r","checked","onChange","currentStatus","newStatus","handleToggleRule","htmlFor","handleDeleteRule","PROFILE_TYPES","PROFILE_STATUS","getProfiles","getActiveProfile","find","profile","createProfile","profiles","newProfile","ruleIds","updateProfile","profileId","deleteProfile","newProfiles","activateProfile","updatedProfiles","activeProfile","deactivateAllProfiles","createSleepProfile","timeRule","whitelistRule","color","createWorkProfile","createVacationProfile","durationRule","createMeetingProfile","scheduleProfile","startDate","endDate","schedule","active","processScheduledProfiles","updated","i","BlockProfilesCard","setProfiles","setActiveProfile","loadProfiles","profilesList","blockProfiles","handleDeactivateAll","handleCreateProfile","renderProfileIcon","handleActivateProfile","cachedBlacklist","lastFetchTime","CACHE_TTL","initialize","savedList","data","timestamp","checkNumber","ensureUpdated","isBlocked","exactMatch","item","reportCount","category","cleanNumber","prefixMatch","syncWithServer","force","arguments","undefined","resolve","setTimeout","mockData","firstReported","version","log","reportNumber","existing","getStats","total","categories","totalReportCount","lastUpdated","prefixRules","SharedBlacklistCard","stats","setStats","searchNumber","setSearchNumber","searchResult","setSearchResult","reportForm","setReportForm","isReporting","setIsReporting","showReportForm","setShowReportForm","sharedBlacklist","loadStats","blacklistStats","toLocaleString","placeholder","e","target","result","disabled","onSubmit","preventDefault","alert","required","AdvancedProtectionPanel","initialized","setInitialized","initializeServices","PatternAnalysisCard"],"sourceRoot":""}