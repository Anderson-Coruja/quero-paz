{"version":3,"file":"static/js/304.6b597a6f.chunk.js","mappings":"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","sources":["components/monitoring/DashboardMonitor.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport trackingService from '../../services/tracking';\n\n/**\n * Componente de Monitoramento para o Quero Paz\n * Exibe estatísticas e métricas de uso da aplicação\n */\nconst DashboardMonitor = () => {\n  const [stats, setStats] = useState({\n    storage: {\n      used: 0,\n      quota: 0,\n      percentage: 0\n    },\n    performance: {\n      loadTime: 0,\n      renderTime: 0\n    },\n    usage: {\n      blockedCalls: 0,\n      appStarts: 0,\n      lastUsed: null\n    },\n    database: {\n      status: 'checking',\n      stores: []\n    },\n    system: {\n      online: navigator.onLine,\n      userAgent: navigator.userAgent,\n      language: navigator.language\n    },\n    tests: {\n      lastRun: null,\n      status: null,\n      results: null\n    }\n  });\n\n  const [refreshInterval, setRefreshInterval] = useState(30);\n  const [autoRefresh, setAutoRefresh] = useState(false);\n\n  // Coleta estatísticas de uso do aplicativo\n  const collectStats = async () => {\n    try {\n      // Registra evento de coleta de estatísticas\n      trackingService.trackEvent(trackingService.EVENT_TYPES.APP, 'stats_collection', {\n        timestamp: new Date().toISOString()\n      });\n\n      // Coleta informações sobre armazenamento\n      if (navigator.storage && navigator.storage.estimate) {\n        const estimate = await navigator.storage.estimate();\n        setStats(prevStats => ({\n          ...prevStats,\n          storage: {\n            used: Math.round(estimate.usage / 1024 / 1024 * 100) / 100,\n            quota: Math.round(estimate.quota / 1024 / 1024 * 100) / 100,\n            percentage: Math.round(estimate.usage / estimate.quota * 100)\n          }\n        }));\n      }\n\n      // Coleta métricas de performance se disponíveis\n      if (window.performance) {\n        const perfEntries = window.performance.getEntriesByType('navigation');\n        if (perfEntries.length > 0) {\n          const navData = perfEntries[0];\n          setStats(prevStats => ({\n            ...prevStats,\n            performance: {\n              loadTime: Math.round(navData.loadEventEnd - navData.navigationStart),\n              renderTime: Math.round(navData.domComplete - navData.domInteractive)\n            }\n          }));\n        }\n      }\n\n      // Coleta informações de uso do aplicativo usando o serviço de rastreamento\n      const usageStats = trackingService.getUsageStats();\n      const silencedCalls = JSON.parse(localStorage.getItem('silencedCalls') || '[]');\n      \n      setStats(prevStats => ({\n        ...prevStats,\n        usage: {\n          blockedCalls: usageStats.blockedCalls || silencedCalls.length,\n          silencedCalls: usageStats.silencedCalls || 0,\n          appStarts: usageStats.appStarts || 0,\n          errors: usageStats.errorCount || 0,\n          lastUsed: usageStats.lastUsed || null,\n          totalEvents: usageStats.totalEvents || 0,\n          eventsByType: usageStats.eventsByType || {}\n        }\n      }));\n\n      // Verifica informações do banco de dados\n      const dbStatus = localStorage.getItem('dbInitialized') === 'true' ? 'online' : 'offline';\n      setStats(prevStats => ({\n        ...prevStats,\n        database: {\n          status: dbStatus,\n          stores: JSON.parse(localStorage.getItem('dbStores') || '[]')\n        }\n      }));\n\n      // Verifica resultados de testes\n      const testHistory = JSON.parse(localStorage.getItem('testHistory') || '[]');\n      if (testHistory.length > 0) {\n        const lastTest = testHistory[testHistory.length - 1];\n        setStats(prevStats => ({\n          ...prevStats,\n          tests: {\n            lastRun: lastTest.timestamp,\n            status: lastTest.overall,\n            results: lastTest.results\n          }\n        }));\n      }\n\n      // Atualiza o estado de conexão\n      setStats(prevStats => ({\n        ...prevStats,\n        system: {\n          ...prevStats.system,\n          online: navigator.onLine\n        }\n      }));\n      \n      // Obter eventos recentes para exibir no painel\n      const recentEvents = trackingService.getEvents(null, 20);\n      setStats(prevStats => ({\n        ...prevStats,\n        events: recentEvents\n      }));\n    } catch (error) {\n      console.error('Erro ao coletar estatísticas:', error);\n      trackingService.trackError('stats_collection', error.message, { stack: error.stack });\n    }\n  };\n\n  // Efeito para inicializar o monitoramento\n  useEffect(() => {\n    collectStats();\n\n    // Registra eventos de conexão\n    const handleOnline = () => {\n      setStats(prevStats => ({\n        ...prevStats,\n        system: {\n          ...prevStats.system,\n          online: true\n        }\n      }));\n    };\n\n    const handleOffline = () => {\n      setStats(prevStats => ({\n        ...prevStats,\n        system: {\n          ...prevStats.system,\n          online: false\n        }\n      }));\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Efeito para auto-refresh\n  useEffect(() => {\n    let interval;\n    \n    if (autoRefresh) {\n      interval = setInterval(collectStats, refreshInterval * 1000);\n    }\n\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [autoRefresh, refreshInterval]);\n\n  const formatDate = (dateString) => {\n    if (!dateString) return 'Nunca';\n    const date = new Date(dateString);\n    return date.toLocaleString();\n  };\n  \n  // Função para determinar a cor do evento baseado no tipo\n  const getEventColor = (eventType) => {\n    switch (eventType.toLowerCase()) {\n      case 'app':\n        return 'text-green-400';\n      case 'call':\n        return 'text-blue-400';\n      case 'user':\n        return 'text-purple-400';\n      case 'error':\n        return 'text-red-400';\n      case 'performance':\n        return 'text-yellow-400';\n      case 'storage':\n        return 'text-cyan-400';\n      default:\n        return 'text-white';\n    }\n  };\n\n  const handleExportData = () => {\n    // Obtém todos os eventos para exportação\n    const allEvents = trackingService.getEvents(null, 1000);\n    \n    const dataToExport = {\n      stats,\n      events: allEvents,\n      timestamp: new Date().toISOString(),\n      appVersion: '1.0.0',\n    };\n\n    const blob = new Blob([JSON.stringify(dataToExport, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `quero-paz-monitoring-${new Date().toISOString().slice(0, 10)}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    // Registra evento de exportação\n    trackingService.trackEvent(trackingService.EVENT_TYPES.USER, 'export_monitoring_data', {\n      timestamp: new Date().toISOString(),\n      eventsCount: allEvents.length\n    });\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-bold\">Painel de Monitoramento</h1>\n        <div className=\"flex space-x-2\">\n          <button \n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            onClick={collectStats}\n          >\n            Atualizar Agora\n          </button>\n          <button \n            className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n            onClick={handleExportData}\n          >\n            Exportar Dados\n          </button>\n        </div>\n      </div>\n\n      <div className=\"mb-4 p-4 bg-gray-100 rounded-lg\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <h2 className=\"text-lg font-medium\">Auto-Atualização</h2>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                id=\"autoRefresh\"\n                checked={autoRefresh}\n                onChange={(e) => setAutoRefresh(e.target.checked)}\n                className=\"mr-2\"\n              />\n              <label htmlFor=\"autoRefresh\">Auto-Refresh</label>\n            </div>\n            <div className=\"flex items-center\">\n              <label htmlFor=\"refreshInterval\" className=\"mr-2\">Intervalo (s):</label>\n              <input\n                type=\"number\"\n                id=\"refreshInterval\"\n                min=\"5\"\n                max=\"300\"\n                value={refreshInterval}\n                onChange={(e) => setRefreshInterval(Number(e.target.value))}\n                className=\"w-16 p-1 border rounded\"\n              />\n            </div>\n          </div>\n        </div>\n        <p className=\"text-sm text-gray-600\">\n          Última atualização: {new Date().toLocaleString()}\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n        {/* Armazenamento */}\n        <div className=\"p-4 border rounded-lg shadow-sm\">\n          <h2 className=\"text-lg font-medium mb-2\">Armazenamento</h2>\n          <div className=\"mb-2\">\n            <div className=\"flex justify-between mb-1\">\n              <span>Utilização</span>\n              <span>{stats.storage.percentage}%</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n              <div \n                className={`h-2.5 rounded-full ${\n                  stats.storage.percentage > 80 ? 'bg-red-600' : \n                  stats.storage.percentage > 60 ? 'bg-yellow-400' : 'bg-green-600'\n                }`}\n                style={{ width: `${stats.storage.percentage}%` }}\n              ></div>\n            </div>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span>Usado: {stats.storage.used} MB</span>\n            <span>Total: {stats.storage.quota} MB</span>\n          </div>\n        </div>\n\n        {/* Performance */}\n        <div className=\"p-4 border rounded-lg shadow-sm\">\n          <h2 className=\"text-lg font-medium mb-2\">Performance</h2>\n          <div className=\"grid grid-cols-2 gap-2\">\n            <div className=\"bg-gray-100 p-2 rounded\">\n              <div className=\"text-sm text-gray-600\">Tempo de Carregamento</div>\n              <div className=\"font-medium\">{stats.performance.loadTime} ms</div>\n            </div>\n            <div className=\"bg-gray-100 p-2 rounded\">\n              <div className=\"text-sm text-gray-600\">Tempo de Renderização</div>\n              <div className=\"font-medium\">{stats.performance.renderTime} ms</div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n        {/* Uso */}\n        <div className=\"p-4 border rounded-lg shadow-sm\">\n          <h2 className=\"text-lg font-medium mb-2\">Uso da Aplicação</h2>\n          <ul className=\"space-y-2\">\n            <li className=\"flex justify-between\">\n              <span>Chamadas Bloqueadas:</span>\n              <span className=\"font-medium\">{stats.usage.blockedCalls}</span>\n            </li>\n            <li className=\"flex justify-between\">\n              <span>Chamadas Silenciadas:</span>\n              <span className=\"font-medium\">{stats.usage.silencedCalls}</span>\n            </li>\n            <li className=\"flex justify-between\">\n              <span>Inicializações:</span>\n              <span className=\"font-medium\">{stats.usage.appStarts}</span>\n            </li>\n            <li className=\"flex justify-between\">\n              <span>Erros:</span>\n              <span className=\"font-medium\">{stats.usage.errors}</span>\n            </li>\n            <li className=\"flex justify-between\">\n              <span>Total de Eventos:</span>\n              <span className=\"font-medium\">{stats.usage.totalEvents}</span>\n            </li>\n            <li className=\"flex justify-between\">\n              <span>Último Uso:</span>\n              <span className=\"font-medium\">{formatDate(stats.usage.lastUsed)}</span>\n            </li>\n            {stats.usage.eventsByType && (\n              <li className=\"mt-3\">\n                <details>\n                  <summary className=\"cursor-pointer font-medium\">Eventos por tipo</summary>\n                  <ul className=\"mt-2 space-y-1 ml-4 text-sm\">\n                    {Object.entries(stats.usage.eventsByType).map(([type, count]) => (\n                      <li key={type} className=\"flex justify-between\">\n                        <span className=\"capitalize\">{type}:</span>\n                        <span>{count}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </details>\n              </li>\n            )}\n          </ul>\n        </div>\n\n        {/* Banco de Dados */}\n        <div className=\"p-4 border rounded-lg shadow-sm\">\n          <h2 className=\"text-lg font-medium mb-2\">Banco de Dados</h2>\n          <div className=\"mb-2 flex items-center\">\n            <span>Status:</span>\n            <span className={`ml-2 px-2 py-0.5 rounded text-sm ${\n              stats.database.status === 'online' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n            }`}>\n              {stats.database.status}\n            </span>\n          </div>\n          <div>\n            <p className=\"text-sm mb-1\">Stores:</p>\n            {stats.database.stores.length > 0 ? (\n              <ul className=\"text-sm list-disc list-inside\">\n                {stats.database.stores.map((store, index) => (\n                  <li key={index}>{store}</li>\n                ))}\n              </ul>\n            ) : (\n              <p className=\"text-sm text-gray-500\">Nenhum store detectado</p>\n            )}\n          </div>\n        </div>\n\n        {/* Sistema */}\n        <div className=\"p-4 border rounded-lg shadow-sm\">\n          <h2 className=\"text-lg font-medium mb-2\">Informações do Sistema</h2>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex justify-between\">\n              <span>Status de Rede:</span>\n              <span className={`${stats.system.online ? 'text-green-600' : 'text-red-600'} font-medium`}>\n                {stats.system.online ? 'Online' : 'Offline'}\n              </span>\n            </li>\n            <li>\n              <p className=\"mb-1\">Navegador:</p>\n              <p className=\"text-gray-600 break-words\">{stats.system.userAgent}</p>\n            </li>\n            <li className=\"flex justify-between\">\n              <span>Idioma:</span>\n              <span>{stats.system.language}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n\n      {/* Resultados de Testes */}\n      <div className=\"p-4 border rounded-lg shadow-sm mb-6\">\n        <h2 className=\"text-lg font-medium mb-2\">Resultados de Testes</h2>\n        {stats.tests.lastRun ? (\n          <div>\n            <div className=\"mb-2 flex items-center\">\n              <span>Último Teste:</span>\n              <span className=\"ml-2\">{formatDate(stats.tests.lastRun)}</span>\n              <span className={`ml-2 px-2 py-0.5 rounded text-sm ${\n                stats.tests.status === 'passed' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n              }`}>\n                {stats.tests.status === 'passed' ? 'PASSOU' : 'FALHOU'}\n              </span>\n            </div>\n            {stats.tests.results && (\n              <div className=\"mt-4\">\n                <h3 className=\"text-md font-medium mb-2\">Detalhes por Teste:</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {Object.entries(stats.tests.results).map(([testName, result]) => (\n                    <div key={testName} className=\"bg-gray-50 p-3 rounded\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <h4 className=\"font-medium capitalize\">{testName}</h4>\n                        <span className={`px-2 py-0.5 rounded text-xs ${\n                          result.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                        }`}>\n                          {result.success ? 'OK' : 'ERRO'}\n                        </span>\n                      </div>\n                      {result.error && (\n                        <p className=\"text-xs text-red-600\">{result.error}</p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <p className=\"text-gray-500\">Nenhum teste executado</p>\n        )}\n        <div className=\"mt-4\">\n          <button \n            className=\"px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600\"\n            onClick={() => {\n              if (window.QueroTestes && typeof window.QueroTestes.runAllTests === 'function') {\n                window.QueroTestes.runAllTests().then(collectStats);\n              } else {\n                alert('Scripts de teste não estão disponíveis. Carregue o arquivo de testes primeiro.');\n              }\n            }}\n          >\n            Executar Testes Agora\n          </button>\n        </div>\n      </div>\n\n      {/* Eventos recentes */}\n      <div className=\"p-4 border rounded-lg shadow-sm mb-6\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <h2 className=\"text-lg font-medium\">Eventos Recentes</h2>\n          <div className=\"flex space-x-2\">\n            <button \n              className=\"px-3 py-1 bg-gray-200 text-gray-800 text-sm rounded hover:bg-gray-300\"\n              onClick={() => {\n                trackingService.clearEvents();\n                collectStats();\n              }}\n            >\n              Limpar Eventos\n            </button>\n          </div>\n        </div>\n        <div className=\"bg-gray-900 text-gray-100 p-3 rounded font-mono text-sm h-60 overflow-y-auto\">\n          {stats.events && stats.events.length > 0 ? (\n            stats.events.map((event, index) => (\n              <div key={index} className={`mb-1 ${getEventColor(event.type)}`}>\n                [{new Date(event.timestamp).toLocaleTimeString()}] [{event.type.toUpperCase()}] {event.action}: \n                {Object.entries(event.data || {}).map(([key, value]) => \n                  key !== 'timestamp' ? ` ${key}=${typeof value === 'object' ? JSON.stringify(value) : value}` : ''\n                )}\n              </div>\n            ))\n          ) : (\n            <div className=\"text-gray-400\">Nenhum evento registrado</div>\n          )}\n        </div>\n      </div>\n      \n      {/* Logs e Avisos */}\n      <div className=\"p-4 border rounded-lg shadow-sm\">\n        <div className=\"flex justify-between items-center mb-2\">\n          <h2 className=\"text-lg font-medium\">Logs do Sistema</h2>\n          <button \n            className=\"px-3 py-1 bg-gray-200 text-gray-800 text-sm rounded hover:bg-gray-300\"\n            onClick={() => {\n              // Limpa logs do localStorage\n              localStorage.removeItem('appLogs');\n              setStats(prevStats => ({\n                ...prevStats,\n                logs: []\n              }));\n            }}\n          >\n            Limpar Logs\n          </button>\n        </div>\n        <div className=\"bg-gray-900 text-gray-100 p-3 rounded font-mono text-sm h-40 overflow-y-auto\">\n          <div className=\"text-green-400\">[INFO] Sistema inicializado em {new Date().toLocaleString()}</div>\n          <div className=\"text-blue-400\">[STORAGE] IndexedDB inicializado</div>\n          <div className=\"text-yellow-400\">[WARN] Service Worker ainda não registrado</div>\n          <div className=\"text-blue-400\">[NETWORK] Status de rede: {stats.system.online ? 'Online' : 'Offline'}</div>\n          <div className=\"text-green-400\">[SECURITY] Criptografia inicializada</div>\n          {stats.tests.lastRun && (\n            <div className={`${stats.tests.status === 'passed' ? 'text-green-400' : 'text-red-400'}`}>\n              [TEST] Testes executados em {formatDate(stats.tests.lastRun)} - Status: {stats.tests.status}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardMonitor;\n"],"names":["DashboardMonitor","stats","setStats","useState","storage","used","quota","percentage","performance","loadTime","renderTime","usage","blockedCalls","appStarts","lastUsed","database","status","stores","system","online","navigator","onLine","userAgent","language","tests","lastRun","results","refreshInterval","setRefreshInterval","autoRefresh","setAutoRefresh","collectStats","async","trackingService","trackEvent","EVENT_TYPES","APP","timestamp","Date","toISOString","estimate","prevStats","_objectSpread","Math","round","window","perfEntries","getEntriesByType","length","navData","loadEventEnd","navigationStart","domComplete","domInteractive","usageStats","getUsageStats","silencedCalls","JSON","parse","localStorage","getItem","errors","errorCount","totalEvents","eventsByType","dbStatus","testHistory","lastTest","overall","recentEvents","getEvents","events","error","console","trackError","message","stack","useEffect","handleOnline","handleOffline","addEventListener","removeEventListener","interval","setInterval","clearInterval","formatDate","dateString","toLocaleString","getEventColor","eventType","toLowerCase","_jsxs","className","children","_jsx","onClick","handleExportData","allEvents","dataToExport","appVersion","blob","Blob","stringify","type","url","URL","createObjectURL","a","document","createElement","href","download","concat","slice","body","appendChild","click","removeChild","revokeObjectURL","USER","eventsCount","id","checked","onChange","e","target","htmlFor","min","max","value","Number","style","width","Object","entries","map","_ref","count","store","index","_ref2","testName","result","success","QueroTestes","runAllTests","then","alert","clearEvents","event","toLocaleTimeString","toUpperCase","action","data","_ref3","key","removeItem","logs"],"sourceRoot":""}