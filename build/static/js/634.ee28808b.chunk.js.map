{"version":3,"file":"static/js/634.ee28808b.chunk.js","mappings":"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","sources":["components/sync/SyncPanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Button, \n  Card, \n  CardContent, \n  CircularProgress, \n  Divider, \n  FormControlLabel, \n  Grid, \n  IconButton, \n  List, \n  ListItem, \n  ListItemText, \n  Switch, \n  Typography, \n  Tooltip,\n  Alert,\n  Snackbar\n} from '@mui/material';\nimport { \n  Sync as SyncIcon, \n  CloudDone as CloudDoneIcon,\n  CloudOff as CloudOffIcon,\n  Settings as SettingsIcon,\n  Info as InfoIcon,\n  BarChart as BarChartIcon\n} from '@mui/icons-material';\nimport SyncManager from '../../services/sync/syncManager';\nimport OfflineStorage from '../../services/sync/offlineStorage';\n\n/**\n * SyncPanel Component - Manages offline data synchronization\n * \n * Provides a UI for users to:\n * - View current sync status\n * - Manually trigger syncs\n * - Configure sync settings\n * - View sync statistics\n */\nconst SyncPanel = () => {\n  // State for sync status\n  const [syncStatus, setSyncStatus] = useState({\n    isOnline: navigator.onLine,\n    lastSync: null,\n    pendingChanges: 0,\n    isSyncing: false,\n    syncError: null,\n    autoSync: true\n  });\n  \n  // State for statistics\n  const [syncStats, setSyncStats] = useState({\n    totalSyncs: 0,\n    failedSyncs: 0,\n    totalDataSynced: 0, // in KB\n    compressionRatio: 0\n  });\n\n  // State for notification\n  const [notification, setNotification] = useState({\n    open: false,\n    message: '',\n    severity: 'info'\n  });\n\n  // Efeito para inicialização e configuração de listeners\n  useEffect(() => {\n    // Definir manipuladores de eventos dentro do useEffect para evitar problemas com dependências\n    const handleOnlineStatusChangeWithSync = () => {\n      setSyncStatus(prev => ({\n        ...prev,\n        isOnline: navigator.onLine\n      }));\n      \n      // Verifica automaticamente se precisamos sincronizar quando ficar online\n      if (navigator.onLine) {\n        // Usar a versão máis recente do status via callback\n        setSyncStatus(prev => {\n          if (prev.pendingChanges > 0 && prev.autoSync) {\n            // Agendar a sincronização para o próximo tick para garantir que o estado está atualizado\n            setTimeout(() => triggerSync(), 0);\n          }\n          return prev;\n        });\n      }\n    };\n\n    const loadInitialData = async () => {\n      try {\n        // Get sync settings from storage\n        const settings = await OfflineStorage.getItem('settings', 'syncSettings') || {};\n        \n        // Get sync stats from storage\n        const stats = await OfflineStorage.getItem('statistics', 'syncStats') || {\n          totalSyncs: 0,\n          failedSyncs: 0,\n          totalDataSynced: 0,\n          compressionRatio: 0\n        };\n        \n        // Get last sync time\n        const lastSync = await OfflineStorage.getItem('sync', 'lastSyncTime');\n        \n        // Count pending changes\n        const pendingChanges = await SyncManager.getPendingChangesCount();\n        \n        setSyncStatus(prev => ({\n          ...prev,\n          lastSync,\n          pendingChanges,\n          autoSync: settings.autoSync !== undefined ? settings.autoSync : true\n        }));\n        \n        setSyncStats(stats);\n      } catch (error) {\n        console.error('Error loading sync data:', error);\n        setNotification({\n          open: true,\n          message: 'Erro ao carregar dados de sincronização',\n          severity: 'error'\n        });\n      }\n    };\n    \n    loadInitialData();\n    \n    // Set up event listeners\n    window.addEventListener('online', handleOnlineStatusChangeWithSync);\n    window.addEventListener('offline', handleOnlineStatusChangeWithSync);\n    \n    // Subscribe to sync events\n    SyncManager.addEventListener('syncStart', handleSyncStart);\n    SyncManager.addEventListener('syncComplete', handleSyncComplete);\n    SyncManager.addEventListener('syncError', handleSyncError);\n    SyncManager.addEventListener('dataChanged', handleDataChanged);\n    \n    return () => {\n      // Clean up event listeners\n      window.removeEventListener('online', handleOnlineStatusChangeWithSync);\n      window.removeEventListener('offline', handleOnlineStatusChangeWithSync);\n      \n      // Unsubscribe from sync events\n      SyncManager.removeEventListener('syncStart', handleSyncStart);\n      SyncManager.removeEventListener('syncComplete', handleSyncComplete);\n      SyncManager.removeEventListener('syncError', handleSyncError);\n      SyncManager.removeEventListener('dataChanged', handleDataChanged);\n    };\n  }, [/* sem dependências para evitar remontagem */]);\n\n  // Handle online/offline status changes\n  const handleOnlineStatusChange = () => {\n    setSyncStatus(prev => ({\n      ...prev,\n      isOnline: navigator.onLine\n    }));\n  };\n  \n  // Event handlers for sync events\n  const handleSyncStart = () => {\n    setSyncStatus(prev => ({\n      ...prev,\n      isSyncing: true,\n      syncError: null\n    }));\n  };\n  \n  const handleSyncComplete = (event) => {\n    const { syncedData, compressionRatio } = event.detail || {};\n    const syncedDataKB = syncedData ? Math.round(syncedData / 1024) : 0;\n    \n    setSyncStatus(prev => ({\n      ...prev,\n      isSyncing: false,\n      lastSync: new Date(),\n      pendingChanges: 0\n    }));\n    \n    setSyncStats(prev => {\n      const newStats = {\n        totalSyncs: prev.totalSyncs + 1,\n        failedSyncs: prev.failedSyncs,\n        totalDataSynced: prev.totalDataSynced + syncedDataKB,\n        compressionRatio: compressionRatio || prev.compressionRatio\n      };\n      \n      // Save updated stats asynchronously\n      OfflineStorage.setItem('statistics', 'syncStats', newStats);\n      \n      return newStats;\n    });\n    \n    setNotification({\n      open: true,\n      message: 'Sincronização concluída com sucesso',\n      severity: 'success'\n    });\n  };\n  \n  const handleSyncError = (event) => {\n    // Extrai o erro com fallbacks mais robustos\n    let errorMessage = 'Erro desconhecido durante a sincronização';\n    \n    if (event && event.detail) {\n      if (event.detail.error) {\n        if (typeof event.detail.error === 'string') {\n          errorMessage = event.detail.error;\n        } else if (event.detail.error.message) {\n          errorMessage = event.detail.error.message;\n        } else {\n          try {\n            errorMessage = event.detail.error.toString();\n          } catch (e) {\n            // Mantém a mensagem padrão se toString() falhar\n          }\n        }\n      }\n    }\n    \n    console.log('Sync error handler received:', errorMessage);\n    \n    // Atualiza o estado de sincronização\n    setSyncStatus(prev => ({\n      ...prev,\n      isSyncing: false,\n      syncError: errorMessage\n    }));\n    \n    // Atualiza estatísticas de sincronização\n    setSyncStats(prev => {\n      const newStats = {\n        ...prev,\n        failedSyncs: (prev.failedSyncs || 0) + 1\n      };\n      \n      // Tenta salvar as estatísticas, com tratamento de erro\n      try {\n        OfflineStorage.setItem('statistics', 'syncStats', newStats)\n          .catch(e => console.error('Erro ao salvar estatísticas:', e));\n      } catch (e) {\n        console.error('Erro ao salvar estatísticas de sincronização:', e);\n      }\n      \n      return newStats;\n    });\n    \n    // Notifica o usuário\n    setNotification({\n      open: true,\n      message: `Erro na sincronização: ${errorMessage}`,\n      severity: 'error'\n    });\n  };\n  \n  const handleDataChanged = () => {\n    setSyncStatus(prev => ({\n      ...prev,\n      pendingChanges: prev.pendingChanges + 1\n    }));\n  };\n\n  // Function to manually trigger sync\n  const triggerSync = async () => {\n    if (!navigator.onLine) {\n      setNotification({\n        open: true,\n        message: 'Você está offline. A sincronização ocorrerá quando você estiver online novamente.',\n        severity: 'warning'\n      });\n      return;\n    }\n    \n    if (syncStatus.isSyncing) {\n      setNotification({\n        open: true,\n        message: 'Sincronização já em andamento',\n        severity: 'info'\n      });\n      return;\n    }\n    \n    // Atualiza o estado para indicar sincronização em andamento mesmo antes do evento\n    setSyncStatus(prev => ({\n      ...prev,\n      isSyncing: true,\n      syncError: null\n    }));\n    \n    try {\n      const result = await SyncManager.syncAll();\n      // Se chegou aqui, foi sucesso, mas o evento syncComplete também vai ser disparado\n      console.log('Sync result:', result);\n    } catch (error) {\n      console.error('Manual sync error:', error);\n      \n      // Notifica o usuário diretamente aqui além do evento\n      const errorMessage = error?.message || error?.toString() || 'Erro desconhecido';\n      \n      setNotification({\n        open: true,\n        message: `Erro na sincronização: ${errorMessage}`,\n        severity: 'error'\n      });\n      \n      // Emite um evento personalizado para o handler de sync error\n      const errorEvent = new CustomEvent('syncError', { \n        detail: { error: errorMessage } \n      });\n      window.dispatchEvent(errorEvent);\n      \n      // Atualiza o estado\n      setSyncStatus(prev => ({\n        ...prev,\n        isSyncing: false,\n        syncError: errorMessage\n      }));\n    }\n  };\n\n  // Toggle auto-sync setting\n  const toggleAutoSync = async (event) => {\n    const autoSync = event.target.checked;\n    \n    setSyncStatus(prev => ({\n      ...prev,\n      autoSync\n    }));\n    \n    // Save the setting\n    const settings = await OfflineStorage.getItem('settings', 'syncSettings') || {};\n    settings.autoSync = autoSync;\n    await OfflineStorage.setItem('settings', 'syncSettings', settings);\n    \n    setNotification({\n      open: true,\n      message: `Sincronização automática ${autoSync ? 'ativada' : 'desativada'}`,\n      severity: 'info'\n    });\n  };\n  \n  // Format date for display\n  const formatDate = (date) => {\n    if (!date) return 'Nunca';\n    if (typeof date === 'string') {\n      date = new Date(date);\n    }\n    return date.toLocaleString();\n  };\n  \n  // Close notification\n  const handleCloseNotification = () => {\n    setNotification(prev => ({\n      ...prev,\n      open: false\n    }));\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n        Gerenciamento de Sincronização\n      </Typography>\n      \n      <Grid container spacing={3}>\n        {/* Status Card */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\" component=\"h3\">\n                  Status\n                </Typography>\n                {syncStatus.isOnline ? (\n                  <Tooltip title=\"Online\">\n                    <CloudDoneIcon color=\"primary\" sx={{ ml: 1 }} />\n                  </Tooltip>\n                ) : (\n                  <Tooltip title=\"Offline\">\n                    <CloudOffIcon color=\"error\" sx={{ ml: 1 }} />\n                  </Tooltip>\n                )}\n              </Box>\n              \n              <List>\n                <ListItem>\n                  <ListItemText \n                    primary=\"Status da conexão\"\n                    secondary={syncStatus.isOnline ? 'Online' : 'Offline'}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText \n                    primary=\"Última sincronização\"\n                    secondary={formatDate(syncStatus.lastSync)}\n                  />\n                </ListItem>\n                <ListItem>\n                  <ListItemText \n                    primary=\"Alterações pendentes\"\n                    secondary={syncStatus.pendingChanges}\n                  />\n                </ListItem>\n              </List>\n              \n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                startIcon={syncStatus.isSyncing ? <CircularProgress size={20} color=\"inherit\" /> : <SyncIcon />}\n                disabled={!syncStatus.isOnline || syncStatus.isSyncing}\n                onClick={triggerSync}\n                fullWidth\n                sx={{ mt: 2 }}\n              >\n                {syncStatus.isSyncing ? 'Sincronizando...' : 'Sincronizar Agora'}\n              </Button>\n              \n              {syncStatus.syncError && (\n                <Alert severity=\"error\" sx={{ mt: 2 }}>\n                  {`Erro na última sincronização: ${syncStatus.syncError}`}\n                </Alert>\n              )}\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        {/* Settings Card */}\n        <Grid item xs={12} md={6}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\" component=\"h3\">\n                  Configurações\n                </Typography>\n                <SettingsIcon sx={{ ml: 1 }} />\n              </Box>\n              \n              <List>\n                <ListItem>\n                  <FormControlLabel\n                    control={\n                      <Switch\n                        checked={syncStatus.autoSync}\n                        onChange={toggleAutoSync}\n                        color=\"primary\"\n                      />\n                    }\n                    label=\"Sincronização automática\"\n                  />\n                  <Tooltip title=\"Sincroniza automaticamente quando você estiver online\">\n                    <IconButton size=\"small\">\n                      <InfoIcon fontSize=\"small\" />\n                    </IconButton>\n                  </Tooltip>\n                </ListItem>\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n        \n        {/* Stats Card */}\n        <Grid item xs={12}>\n          <Card>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                <Typography variant=\"h6\" component=\"h3\">\n                  Estatísticas de Sincronização\n                </Typography>\n                <BarChartIcon sx={{ ml: 1 }} />\n              </Box>\n              \n              <Grid container spacing={2}>\n                <Grid item xs={6} sm={3}>\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    Total de sincronizações\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {syncStats.totalSyncs}\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={6} sm={3}>\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    Sincronizações falhas\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {syncStats.failedSyncs}\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={6} sm={3}>\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    Dados sincronizados\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {syncStats.totalDataSynced} KB\n                  </Typography>\n                </Grid>\n                \n                <Grid item xs={6} sm={3}>\n                  <Typography variant=\"subtitle2\" color=\"textSecondary\">\n                    Taxa de compressão\n                  </Typography>\n                  <Typography variant=\"h5\">\n                    {syncStats.compressionRatio.toFixed(2)}x\n                  </Typography>\n                </Grid>\n              </Grid>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      \n      <Snackbar \n        open={notification.open} \n        autoHideDuration={6000} \n        onClose={handleCloseNotification}\n      >\n        <Alert onClose={handleCloseNotification} severity={notification.severity}>\n          {notification.message}\n        </Alert>\n      </Snackbar>\n    </Box>\n  );\n};\n\nexport default SyncPanel;\n"],"names":["SyncPanel","syncStatus","setSyncStatus","useState","isOnline","navigator","onLine","lastSync","pendingChanges","isSyncing","syncError","autoSync","syncStats","setSyncStats","totalSyncs","failedSyncs","totalDataSynced","compressionRatio","notification","setNotification","open","message","severity","useEffect","handleOnlineStatusChangeWithSync","prev","_objectSpread","setTimeout","triggerSync","async","settings","OfflineStorage","getItem","stats","SyncManager","getPendingChangesCount","undefined","error","console","loadInitialData","window","addEventListener","handleSyncStart","handleSyncComplete","handleSyncError","handleDataChanged","removeEventListener","event","syncedData","detail","syncedDataKB","Math","round","Date","newStats","setItem","errorMessage","toString","e","log","catch","concat","result","syncAll","errorEvent","CustomEvent","dispatchEvent","handleCloseNotification","_jsxs","Box","sx","p","children","_jsx","Typography","variant","component","gutterBottom","Grid","container","spacing","item","xs","md","Card","CardContent","display","alignItems","mb","Tooltip","title","CloudDoneIcon","color","ml","CloudOffIcon","List","ListItem","ListItemText","primary","secondary","date","toLocaleString","Button","startIcon","CircularProgress","size","SyncIcon","disabled","onClick","fullWidth","mt","Alert","SettingsIcon","FormControlLabel","control","Switch","checked","onChange","target","label","IconButton","InfoIcon","fontSize","BarChartIcon","sm","toFixed","Snackbar","autoHideDuration","onClose"],"sourceRoot":""}