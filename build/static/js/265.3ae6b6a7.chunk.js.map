{"version":3,"file":"static/js/265.3ae6b6a7.chunk.js","mappings":"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","sources":["services/security/privacyManager.js","components/security/PrivacySettingsPanel.jsx","services/security/encryption.js"],"sourcesContent":["/**\n * Gerenciador de Privacidade para o Quero Paz\n * \n * Este módulo gerencia configurações de privacidade, exclusão automática de dados,\n * e outras funcionalidades relacionadas à proteção dos dados do usuário.\n */\n\nimport offlineStorage from '../sync/offlineStorage';\nimport { storageEncryption, secureHashPhone } from './encryption';\n\n// Constantes para configuração de privacidade\nconst DEFAULT_PRIVACY_SETTINGS = {\n  // Configurações de retenção de dados\n  dataRetention: {\n    enabled: true,\n    retentionDays: {\n      calls: 30,        // Retenção de histórico de chamadas\n      logs: 15,         // Retenção de logs\n      reports: 90       // Retenção de denúncias\n    },\n    keepBlocked: true   // Manter histórico de números bloqueados permanentemente\n  },\n  \n  // Configurações de compartilhamento\n  sharing: {\n    contributeToReputation: true,  // Compartilhar dados de reputação anonimizados\n    privacyLevel: 'balanced',      // 'maximum', 'balanced', 'standard'\n    anonymizeContacts: true        // Anonimizar informações de contatos\n  },\n  \n  // Configurações de armazenamento\n  storage: {\n    storeCallHistory: true,        // Armazenar histórico de chamadas\n    encryptSensitiveData: true     // Criptografar dados sensíveis\n  }\n};\n\n/**\n * Gerenciador de Privacidade\n */\nclass PrivacyManager {\n  constructor() {\n    this.settings = { ...DEFAULT_PRIVACY_SETTINGS };\n    this.initialized = false;\n  }\n  \n  /**\n   * Inicializa o gerenciador de privacidade\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    if (this.initialized) return;\n    \n    try {\n      // Carrega configurações salvas\n      const savedSettings = await offlineStorage.getItem('settings', 'privacySettings');\n      \n      if (savedSettings) {\n        this.settings = { \n          ...DEFAULT_PRIVACY_SETTINGS,\n          ...savedSettings\n        };\n      }\n      \n      // Agenda limpeza automática de dados\n      this._scheduleDataCleanup();\n      \n      this.initialized = true;\n      console.log('Gerenciador de privacidade inicializado');\n    } catch (error) {\n      console.error('Erro ao inicializar gerenciador de privacidade:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Atualiza configurações de privacidade\n   * \n   * @param {Object} newSettings - Novas configurações\n   * @returns {Promise<Object>} - Configurações atualizadas\n   */\n  async updateSettings(newSettings) {\n    try {\n      // Mescla novas configurações com as existentes\n      this.settings = {\n        ...this.settings,\n        ...newSettings\n      };\n      \n      // Salva configurações atualizadas\n      await offlineStorage.setItem('settings', 'privacySettings', this.settings);\n      \n      // Reconfigura limpeza de dados se necessário\n      this._scheduleDataCleanup();\n      \n      return this.settings;\n    } catch (error) {\n      console.error('Erro ao atualizar configurações de privacidade:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Obtém configurações de privacidade atuais\n   * \n   * @returns {Object} - Configurações de privacidade\n   */\n  getSettings() {\n    return { ...this.settings };\n  }\n  \n  /**\n   * Anonimiza dados para compartilhamento\n   * \n   * @param {Object} data - Dados a serem anonimizados\n   * @param {string} dataType - Tipo de dados (calls, contacts, reputation)\n   * @returns {Object} - Dados anonimizados\n   */\n  anonymizeData(data, dataType) {\n    // Se o nível de privacidade for máximo, não compartilha dados detalhados\n    if (this.settings.sharing.privacyLevel === 'maximum') {\n      // Retorna apenas dados estatísticos agregados\n      return this._createAggregatedData(data, dataType);\n    }\n    \n    // Clone os dados para não modificar o original\n    const anonymized = JSON.parse(JSON.stringify(data));\n    \n    // Estratégias de anonimização por tipo de dados\n    switch (dataType) {\n      case 'calls':\n        return this._anonymizeCalls(anonymized);\n      \n      case 'contacts':\n        return this._anonymizeContacts(anonymized);\n      \n      case 'reputation':\n        return this._anonymizeReputationData(anonymized);\n      \n      default:\n        // Remove informações identificáveis genéricas\n        return this._removeIdentifiableInfo(anonymized);\n    }\n  }\n  \n  /**\n   * Realiza limpeza manual de dados antigos\n   * \n   * @returns {Promise<Object>} - Estatísticas de limpeza\n   */\n  async performDataCleanup() {\n    try {\n      if (!this.settings.dataRetention.enabled) {\n        return { cleaned: false, reason: 'Data retention disabled' };\n      }\n      \n      const stats = {\n        calls: 0,\n        logs: 0,\n        reports: 0,\n        total: 0\n      };\n      \n      // Limpa dados antigos de acordo com as configurações\n      const now = new Date();\n      \n      // Limpa chamadas antigas\n      if (this.settings.dataRetention.retentionDays.calls > 0) {\n        stats.calls = await this._cleanupOldData(\n          'calls',\n          this.settings.dataRetention.retentionDays.calls,\n          now,\n          this.settings.dataRetention.keepBlocked\n        );\n      }\n      \n      // Limpa logs antigos\n      if (this.settings.dataRetention.retentionDays.logs > 0) {\n        stats.logs = await this._cleanupOldData(\n          'logs',\n          this.settings.dataRetention.retentionDays.logs,\n          now\n        );\n      }\n      \n      // Limpa denúncias antigas\n      if (this.settings.dataRetention.retentionDays.reports > 0) {\n        stats.reports = await this._cleanupOldData(\n          'reputation',\n          this.settings.dataRetention.retentionDays.reports,\n          now,\n          true // Mantém reportes importantes\n        );\n      }\n      \n      stats.total = stats.calls + stats.logs + stats.reports;\n      \n      return {\n        cleaned: true,\n        timestamp: now.toISOString(),\n        stats\n      };\n    } catch (error) {\n      console.error('Erro durante limpeza de dados:', error);\n      return {\n        cleaned: false,\n        error: error.message\n      };\n    }\n  }\n  \n  /**\n   * Exclui completamente todos os dados do usuário\n   * \n   * @param {string} confirmationKey - Chave de confirmação para evitar exclusões acidentais\n   * @returns {Promise<boolean>} - Resultado da operação\n   */\n  async purgeAllData(confirmationKey) {\n    if (confirmationKey !== 'CONFIRM_PURGE_ALL_DATA') {\n      throw new Error('Chave de confirmação inválida para exclusão de dados');\n    }\n    \n    try {\n      const stores = [\n        'calls', 'reputation', 'logs', 'settings', 'sync_queue', \n        'profiles', 'community_data', 'rules'\n      ];\n      \n      // Exclui dados de cada store\n      for (const store of stores) {\n        await offlineStorage.clearStore(store);\n      }\n      \n      // Reinicia configurações de privacidade para o padrão\n      this.settings = { ...DEFAULT_PRIVACY_SETTINGS };\n      \n      return true;\n    } catch (error) {\n      console.error('Erro durante exclusão completa de dados:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * Verifica se um armazenamento de dados está em conformidade com as configurações de privacidade\n   * \n   * @param {string} storeName - Nome do store\n   * @param {string} key - Chave do item\n   * @param {any} value - Valor do item\n   * @returns {boolean} - Se está em conformidade\n   */\n  isCompliant(storeName, key, value) {\n    // Verificações específicas por tipo de store\n    switch (storeName) {\n      case 'calls':\n        return this.settings.storage.storeCallHistory;\n      \n      case 'reputation':\n        // Sempre permite armazenar dados de reputação, mas o compartilhamento é controlado\n        return true;\n      \n      default:\n        return true;\n    }\n  }\n  \n  // Métodos privados para operações internas\n  \n  /**\n   * Agenda limpeza periódica de dados antigos\n   * @private\n   */\n  _scheduleDataCleanup() {\n    // Limpa o temporizador existente, se houver\n    if (this._cleanupTimer) {\n      clearTimeout(this._cleanupTimer);\n    }\n    \n    // Se a retenção de dados estiver desativada, não agenda limpeza\n    if (!this.settings.dataRetention.enabled) {\n      return;\n    }\n    \n    // Agenda para executar diariamente (86400000 ms = 24 horas)\n    this._cleanupTimer = setTimeout(async () => {\n      try {\n        await this.performDataCleanup();\n      } catch (error) {\n        console.error('Erro durante limpeza agendada:', error);\n      } finally {\n        // Reagenda para o próximo dia\n        this._scheduleDataCleanup();\n      }\n    }, 86400000);\n  }\n  \n  /**\n   * Limpa dados antigos de um store específico\n   * \n   * @param {string} storeName - Nome do store a limpar\n   * @param {number} maxAgeDays - Idade máxima em dias\n   * @param {Date} now - Data atual\n   * @param {boolean} keepImportant - Se deve manter itens importantes\n   * @returns {Promise<number>} - Quantidade de itens removidos\n   * @private\n   */\n  async _cleanupOldData(storeName, maxAgeDays, now, keepImportant = false) {\n    try {\n      const allItems = await offlineStorage.getAllItems(storeName);\n      const cutoffDate = new Date(now.getTime() - (maxAgeDays * 86400000));\n      let removedCount = 0;\n      \n      for (const item of allItems) {\n        const { key, value } = item;\n        \n        // Verifica a data do item\n        const itemDate = new Date(value.timestamp || value.date || value.createdAt || 0);\n        \n        // Pula itens sem data válida ou itens importantes que devem ser mantidos\n        if (!itemDate || isNaN(itemDate.getTime())) continue;\n        if (keepImportant && this._isImportantItem(value, storeName)) continue;\n        \n        // Remove itens mais antigos que a data de corte\n        if (itemDate < cutoffDate) {\n          await offlineStorage.removeItem(storeName, key);\n          removedCount++;\n        }\n      }\n      \n      return removedCount;\n    } catch (error) {\n      console.error(`Erro ao limpar dados antigos de ${storeName}:`, error);\n      return 0;\n    }\n  }\n  \n  /**\n   * Verifica se um item é importante e deve ser preservado\n   * \n   * @param {Object} item - Item a verificar\n   * @param {string} storeName - Nome do store\n   * @returns {boolean} - Se o item é importante\n   * @private\n   */\n  _isImportantItem(item, storeName) {\n    switch (storeName) {\n      case 'calls':\n        // Manter chamadas bloqueadas se configurado\n        return this.settings.dataRetention.keepBlocked && item.blocked;\n      \n      case 'reputation':\n        // Manter reportes de números perigosos\n        return item.category === 'dangerous' || item.category === 'scam';\n      \n      default:\n        return false;\n    }\n  }\n  \n  /**\n   * Anonimiza dados de chamadas\n   * \n   * @param {Object} callsData - Dados de chamadas\n   * @returns {Object} - Dados anonimizados\n   * @private\n   */\n  _anonymizeCalls(callsData) {\n    if (Array.isArray(callsData)) {\n      return callsData.map(call => {\n        // Remove detalhes pessoais\n        const anonymized = { ...call };\n        \n        // Substitui número real por hash\n        if (anonymized.phoneNumber) {\n          anonymized.phoneHash = secureHashPhone(anonymized.phoneNumber);\n          delete anonymized.phoneNumber;\n        }\n        \n        // Remove outros dados identificáveis\n        delete anonymized.contactName;\n        delete anonymized.notes;\n        \n        return anonymized;\n      });\n    }\n    \n    return callsData;\n  }\n  \n  /**\n   * Anonimiza dados de contatos\n   * \n   * @param {Object} contactsData - Dados de contatos\n   * @returns {Object} - Dados anonimizados\n   * @private\n   */\n  _anonymizeContacts(contactsData) {\n    if (this.settings.sharing.anonymizeContacts) {\n      if (Array.isArray(contactsData)) {\n        return contactsData.map(contact => {\n          // Mantém apenas hashes dos números\n          return {\n            phoneHash: secureHashPhone(contact.phoneNumber || ''),\n            isContact: true,\n            // Mantém dados não identificáveis\n            isTrusted: !!contact.isTrusted,\n            isBlocked: !!contact.isBlocked\n          };\n        });\n      }\n    }\n    \n    // Não compartilha nenhum dado de contato se não estiver habilitado\n    return [];\n  }\n  \n  /**\n   * Anonimiza dados de reputação\n   * \n   * @param {Object} reputationData - Dados de reputação\n   * @returns {Object} - Dados anonimizados\n   * @private\n   */\n  _anonymizeReputationData(reputationData) {\n    // Nível de privacidade afeta quais dados são compartilhados\n    const privacyLevel = this.settings.sharing.privacyLevel;\n    \n    if (privacyLevel === 'maximum') {\n      // Compartilha apenas categoria e score geral\n      return {\n        category: reputationData.category,\n        score: reputationData.communityScore,\n        reportCount: reputationData.reportCount,\n        lastUpdated: new Date().toISOString()\n      };\n    } else if (privacyLevel === 'balanced') {\n      // Compartilha mais dados mas remove detalhes específicos\n      const anonymized = { ...reputationData };\n      \n      // Remove detalhes de eventos\n      if (anonymized.events) {\n        anonymized.events = anonymized.events.map(event => ({\n          eventType: event.eventType,\n          timestamp: event.timestamp,\n          category: event.category\n        }));\n      }\n      \n      return anonymized;\n    } else {\n      // Nível padrão, compartilha mais dados\n      return reputationData;\n    }\n  }\n  \n  /**\n   * Cria dados agregados para compartilhamento com privacidade máxima\n   * \n   * @param {Object} data - Dados originais\n   * @param {string} dataType - Tipo de dados\n   * @returns {Object} - Dados estatísticos agregados\n   * @private\n   */\n  _createAggregatedData(data, dataType) {\n    switch (dataType) {\n      case 'calls':\n        return {\n          totalCalls: Array.isArray(data) ? data.length : 0,\n          blockedCount: Array.isArray(data) ? data.filter(call => call.blocked).length : 0,\n          timestamp: new Date().toISOString(),\n          isAggregated: true\n        };\n      \n      case 'reputation':\n        return {\n          category: data.category,\n          isAggregated: true\n        };\n      \n      default:\n        return { isAggregated: true };\n    }\n  }\n  \n  /**\n   * Remove informações identificáveis genéricas de um objeto\n   * \n   * @param {Object} data - Dados a processar\n   * @returns {Object} - Dados sem informações identificáveis\n   * @private\n   */\n  _removeIdentifiableInfo(data) {\n    // Campos comuns que podem conter informações identificáveis\n    const identifiableFields = [\n      'name', 'firstName', 'lastName', 'fullName', 'email', 'phone', 'phoneNumber',\n      'address', 'city', 'state', 'zipCode', 'postalCode', 'birthDate', 'age',\n      'ssn', 'socialSecurityNumber', 'passport', 'license', 'idNumber', 'notes'\n    ];\n    \n    // Se for um array, processa cada item\n    if (Array.isArray(data)) {\n      return data.map(item => this._removeIdentifiableInfo(item));\n    }\n    \n    // Se for um objeto, processa cada campo\n    if (data && typeof data === 'object') {\n      const result = {};\n      \n      for (const [key, value] of Object.entries(data)) {\n        // Pula campos identificáveis\n        if (identifiableFields.includes(key)) {\n          continue;\n        }\n        \n        // Processa recursivamente objetos e arrays\n        if (value && typeof value === 'object') {\n          result[key] = this._removeIdentifiableInfo(value);\n        } else {\n          result[key] = value;\n        }\n      }\n      \n      return result;\n    }\n    \n    // Retorna primitivos sem alteração\n    return data;\n  }\n}\n\n// Exporta instância como singleton\nconst privacyManager = new PrivacyManager();\nexport default privacyManager;\n","import React, { useState, useEffect } from 'react';\nimport privacyManager from '../../services/security/privacyManager';\n\n/**\n * Painel de Configurações de Privacidade\n * \n * Permite ao usuário configurar opções de privacidade e segurança\n * como retenção de dados, criptografia e compartilhamento.\n */\nconst PrivacySettingsPanel = () => {\n  // Estado para armazenar configurações\n  const [settings, setSettings] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [saveStatus, setSaveStatus] = useState('');\n  \n  // Carrega configurações ao inicializar\n  useEffect(() => {\n    const loadSettings = async () => {\n      try {\n        // Inicializa o gerenciador de privacidade\n        await privacyManager.initialize();\n        \n        // Obtém configurações atuais\n        const currentSettings = privacyManager.getSettings();\n        setSettings(currentSettings);\n        setLoading(false);\n      } catch (error) {\n        console.error('Erro ao carregar configurações de privacidade:', error);\n        setLoading(false);\n      }\n    };\n    \n    loadSettings();\n  }, []);\n  \n  // Atualiza uma configuração\n  const updateSetting = (section, key, value) => {\n    if (!settings) return;\n    \n    setSettings({\n      ...settings,\n      [section]: {\n        ...settings[section],\n        [key]: value\n      }\n    });\n  };\n  \n  // Atualiza uma configuração aninhada (para retenção de dados)\n  const updateNestedSetting = (section, subSection, key, value) => {\n    if (!settings) return;\n    \n    setSettings({\n      ...settings,\n      [section]: {\n        ...settings[section],\n        [subSection]: {\n          ...settings[section][subSection],\n          [key]: value\n        }\n      }\n    });\n  };\n  \n  // Salva as configurações\n  const saveSettings = async () => {\n    try {\n      setSaveStatus('saving');\n      await privacyManager.updateSettings(settings);\n      setSaveStatus('saved');\n      \n      // Limpa a mensagem após alguns segundos\n      setTimeout(() => setSaveStatus(''), 3000);\n    } catch (error) {\n      console.error('Erro ao salvar configurações:', error);\n      setSaveStatus('error');\n    }\n  };\n  \n  // Limpa dados antigos manualmente\n  const cleanupData = async () => {\n    try {\n      setSaveStatus('cleaning');\n      const result = await privacyManager.performDataCleanup();\n      console.log('Resultado da limpeza:', result);\n      setSaveStatus('cleaned');\n      \n      // Limpa a mensagem após alguns segundos\n      setTimeout(() => setSaveStatus(''), 3000);\n    } catch (error) {\n      console.error('Erro ao limpar dados:', error);\n      setSaveStatus('error');\n    }\n  };\n  \n  // Renderiza carregando\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center p-8\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-paz-blue-600\"></div>\n      </div>\n    );\n  }\n  \n  // Renderiza mensagem de erro se não há configurações\n  if (!settings) {\n    return (\n      <div className=\"bg-red-50 p-4 rounded-lg\">\n        <h3 className=\"text-red-800 font-medium\">Erro ao carregar configurações</h3>\n        <p className=\"text-red-600\">Não foi possível carregar suas configurações de privacidade.</p>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"max-w-3xl mx-auto space-y-6 p-4\">\n      <div className=\"bg-white rounded-paz shadow-paz p-6\">\n        <h2 className=\"text-2xl font-bold text-paz-blue-800 mb-4\">Configurações de Privacidade</h2>\n        <p className=\"text-gray-600 mb-6\">\n          Configure como seus dados são armazenados, processados e compartilhados.\n        </p>\n        \n        {/* Seção: Retenção de dados */}\n        <div className=\"mb-8 bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n            <span className=\"mr-2\">📅</span> Retenção de dados\n          </h3>\n          \n          <div className=\"ml-2 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.dataRetention.enabled}\n                  onChange={(e) => updateSetting('dataRetention', 'enabled', e.target.checked)}\n                  className=\"mr-2 h-4 w-4 text-paz-blue-600\"\n                />\n                <span>Limpar dados antigos automaticamente</span>\n              </label>\n            </div>\n            \n            {settings.dataRetention.enabled && (\n              <div className=\"space-y-3 mt-2 pl-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Manter histórico de chamadas por:\n                  </label>\n                  <select\n                    value={settings.dataRetention.retentionDays.calls}\n                    onChange={(e) => updateNestedSetting('dataRetention', 'retentionDays', 'calls', Number(e.target.value))}\n                    className=\"w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-paz-blue-500 focus:border-paz-blue-500\"\n                  >\n                    <option value={7}>7 dias</option>\n                    <option value={15}>15 dias</option>\n                    <option value={30}>30 dias</option>\n                    <option value={90}>90 dias</option>\n                    <option value={180}>6 meses</option>\n                    <option value={365}>1 ano</option>\n                  </select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Manter logs por:\n                  </label>\n                  <select\n                    value={settings.dataRetention.retentionDays.logs}\n                    onChange={(e) => updateNestedSetting('dataRetention', 'retentionDays', 'logs', Number(e.target.value))}\n                    className=\"w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-paz-blue-500 focus:border-paz-blue-500\"\n                  >\n                    <option value={7}>7 dias</option>\n                    <option value={15}>15 dias</option>\n                    <option value={30}>30 dias</option>\n                    <option value={90}>90 dias</option>\n                  </select>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={settings.dataRetention.keepBlocked}\n                      onChange={(e) => updateSetting('dataRetention', 'keepBlocked', e.target.checked)}\n                      className=\"mr-2 h-4 w-4 text-paz-blue-600\"\n                    />\n                    <span>Manter histórico de números bloqueados</span>\n                  </label>\n                </div>\n                \n                <div className=\"mt-2\">\n                  <button \n                    onClick={cleanupData}\n                    disabled={saveStatus === 'cleaning'}\n                    className=\"px-4 py-1.5 bg-gray-200 text-gray-800 rounded hover:bg-gray-300 transition-colors text-sm\"\n                  >\n                    {saveStatus === 'cleaning' ? 'Limpando...' : 'Limpar dados antigos agora'}\n                  </button>\n                  \n                  {saveStatus === 'cleaned' && (\n                    <span className=\"text-green-600 text-sm ml-2\">\n                      ✓ Dados antigos removidos\n                    </span>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Seção: Compartilhamento */}\n        <div className=\"mb-8 bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n            <span className=\"mr-2\">🔄</span> Compartilhamento\n          </h3>\n          \n          <div className=\"ml-2 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.sharing.contributeToReputation}\n                  onChange={(e) => updateSetting('sharing', 'contributeToReputation', e.target.checked)}\n                  className=\"mr-2 h-4 w-4 text-paz-blue-600\"\n                />\n                <span>Contribuir com sistema de reputação</span>\n              </label>\n            </div>\n            \n            {settings.sharing.contributeToReputation && (\n              <div className=\"space-y-3 mt-2 pl-6\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                    Nível de privacidade:\n                  </label>\n                  <select\n                    value={settings.sharing.privacyLevel}\n                    onChange={(e) => updateSetting('sharing', 'privacyLevel', e.target.value)}\n                    className=\"w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-paz-blue-500 focus:border-paz-blue-500\"\n                  >\n                    <option value=\"maximum\">Máximo - Apenas estatísticas agregadas</option>\n                    <option value=\"balanced\">Balanceado - Dados anônimos</option>\n                    <option value=\"standard\">Padrão - Compartilhamento normal</option>\n                  </select>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <label className=\"flex items-center\">\n                    <input\n                      type=\"checkbox\"\n                      checked={settings.sharing.anonymizeContacts}\n                      onChange={(e) => updateSetting('sharing', 'anonymizeContacts', e.target.checked)}\n                      className=\"mr-2 h-4 w-4 text-paz-blue-600\"\n                    />\n                    <span>Anonimizar informações de contatos</span>\n                  </label>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Seção: Armazenamento */}\n        <div className=\"mb-8 bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold text-lg mb-3 flex items-center\">\n            <span className=\"mr-2\">💾</span> Armazenamento\n          </h3>\n          \n          <div className=\"ml-2 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.storage.storeCallHistory}\n                  onChange={(e) => updateSetting('storage', 'storeCallHistory', e.target.checked)}\n                  className=\"mr-2 h-4 w-4 text-paz-blue-600\"\n                />\n                <span>Armazenar histórico de chamadas</span>\n              </label>\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.storage.encryptSensitiveData}\n                  onChange={(e) => updateSetting('storage', 'encryptSensitiveData', e.target.checked)}\n                  className=\"mr-2 h-4 w-4 text-paz-blue-600\"\n                />\n                <span>Criptografar dados sensíveis</span>\n              </label>\n            </div>\n            \n            {!settings.storage.storeCallHistory && (\n              <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-3 mt-2\">\n                <p className=\"text-sm text-yellow-700\">\n                  <strong>Nota:</strong> Desativar o armazenamento de histórico de chamadas reduzirá a eficácia do bloqueio, pois o aplicativo não lembrará de chamadas anteriores.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Botão de salvar */}\n        <div className=\"mt-6 flex justify-end\">\n          <button\n            onClick={saveSettings}\n            disabled={saveStatus === 'saving'}\n            className=\"px-5 py-2 bg-paz-blue-600 text-white rounded-lg hover:bg-paz-blue-700 transition-colors\"\n          >\n            {saveStatus === 'saving' ? 'Salvando...' : 'Salvar Configurações'}\n          </button>\n          \n          {saveStatus === 'saved' && (\n            <span className=\"text-green-600 flex items-center ml-3\">\n              ✓ Salvo com sucesso\n            </span>\n          )}\n          \n          {saveStatus === 'error' && (\n            <span className=\"text-red-600 flex items-center ml-3\">\n              ✗ Erro ao salvar\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PrivacySettingsPanel;\n","/**\n * Serviço de Criptografia para o Quero Paz\n * \n * Este módulo implementa criptografia para proteger dados sensíveis usando\n * o algoritmo AES do CryptoJS com uma abordagem simplificada e robusta.\n */\n\nimport CryptoJS from 'crypto-js';\n\n// Chave padrão para ser usada quando nenhuma chave for fornecida\n// Em produção, isso deve ser um segredo bem protegido\nconst DEFAULT_SECRET_KEY = 'QuErO-pAz_MaStEr_KeY_2025-v2';\n\n/**\n * Criptografa dados sensíveis usando AES\n * \n * @param {any} data - Dados a serem criptografados (objeto ou string)\n * @param {string} secretKey - Chave secreta para criptografia (opcional)\n * @returns {Object} - Objeto com dados criptografados\n */\nexport const encryptData = (data, secretKey = DEFAULT_SECRET_KEY) => {\n  try {\n    // Certifica-se de que estamos trabalhando com uma string\n    const stringToEncrypt = typeof data === 'string' \n      ? data \n      : JSON.stringify(data);\n    \n    // Criptografa diretamente usando o segredo\n    const encrypted = CryptoJS.AES.encrypt(stringToEncrypt, secretKey).toString();\n    \n    // Retorna um objeto simples com os dados criptografados\n    return {\n      encryptedData: encrypted,\n      timestamp: new Date().toISOString()\n    };\n  } catch (error) {\n    console.error('Erro ao criptografar dados:', error);\n    throw new Error('Falha na criptografia de dados');\n  }\n};\n\n/**\n * Descriptografa dados usando AES\n * \n * @param {Object} encryptedPackage - Objeto contendo os dados criptografados\n * @param {string} secretKey - Chave secreta para descriptografia (opcional)\n * @returns {any} - Dados descriptografados (objeto ou string) ou objeto vazio em caso de erro\n */\nexport const decryptData = (encryptedPackage, secretKey = DEFAULT_SECRET_KEY) => {\n  try {\n    // Para testes, se for um objeto vazio ou string vazia, retorna um objeto vazio\n    if (!encryptedPackage || \n        (typeof encryptedPackage === 'object' && Object.keys(encryptedPackage).length === 0) ||\n        (typeof encryptedPackage === 'string' && encryptedPackage.trim() === '')) {\n      console.warn('Pacote de dados vazio ou inválido, retornando objeto vazio');\n      return {};\n    }\n    \n    // Validação básica do pacote\n    if (!encryptedPackage.encryptedData) {\n      console.warn('Pacote de dados sem encryptedData, retornando objeto vazio');\n      return {};\n    }\n    \n    // Obtém os dados criptografados\n    const { encryptedData } = encryptedPackage;\n    \n    // Tenta descriptografar\n    const bytes = CryptoJS.AES.decrypt(encryptedData, secretKey);\n    const decryptedString = bytes.toString(CryptoJS.enc.Utf8);\n    \n    // Verifica se a descriptografia foi bem-sucedida\n    if (!decryptedString) {\n      console.warn('Descriptografia produziu resultado vazio, retornando objeto vazio');\n      return {};\n    }\n    \n    // Tenta converter para objeto se for um JSON válido\n    try {\n      return JSON.parse(decryptedString);\n    } catch (parseError) {\n      // Se não for um JSON válido, retorna a string\n      return decryptedString;\n    }\n  } catch (error) {\n    console.error('Erro ao descriptografar dados:', error);\n    // Em vez de lançar erro, retorna um objeto vazio para evitar quebrar o fluxo\n    return {};\n  }\n};\n\n/**\n * Verifica se uma chave consegue descriptografar um pacote de dados\n * \n * @param {Object} encryptedPackage - Pacote com dados criptografados\n * @param {string} testKey - Chave a ser testada\n * @returns {boolean} - Verdadeiro se a chave puder descriptografar\n */\nexport const verifyKey = (encryptedPackage, testKey) => {\n  try {\n    decryptData(encryptedPackage, testKey);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\n/**\n * Criptografa um número de telefone para armazenamento seguro\n * \n * @param {string} phoneNumber - Número de telefone\n * @returns {string} - Hash criptográfico do número\n */\nexport const secureHashPhone = (phoneNumber) => {\n  try {\n    // Remove caracteres não numéricos\n    const normalizedPhone = phoneNumber ? phoneNumber.replace(/\\D/g, '') : '';\n    \n    if (!normalizedPhone) {\n      throw new Error('Número de telefone inválido');\n    }\n    \n    // Cria um hash SHA-256 do número\n    return CryptoJS.SHA256(normalizedPhone).toString();\n  } catch (error) {\n    console.error('Erro ao gerar hash do telefone:', error);\n    throw new Error('Falha ao processar número de telefone');\n  }\n};\n\n/**\n * Gera uma chave de acesso para o usuário com base em uma senha\n * \n * @param {string} password - Senha do usuário\n * @param {string} [userIdentifier] - Identificador único do usuário (opcional)\n * @returns {string} - Chave de acesso\n */\nexport const generateAccessKey = (password, userIdentifier = 'default_user') => {\n  try {\n    if (!password) {\n      throw new Error('Senha inválida');\n    }\n    \n    // Combina senha e identificador\n    const combined = `${password}:${userIdentifier}`;\n    \n    // Gera um hash que será usado como chave de acesso\n    return CryptoJS.SHA256(combined).toString();\n  } catch (error) {\n    console.error('Erro ao gerar chave de acesso:', error);\n    throw new Error('Falha ao gerar chave de acesso');\n  }\n};\n\n/**\n * Implementa criptografia para ser usada com o sistema de armazenamento\n */\nexport const storageEncryption = {\n  /**\n   * Método para criptografar dados antes de salvar no armazenamento\n   * \n   * @param {string} storeName - Nome do store\n   * @param {string} key - Chave do item\n   * @param {any} value - Valor para armazenamento\n   * @returns {Object} - Dados criptografados para armazenamento\n   */\n  encrypt: (storeName, key, value) => {\n    try {\n      // Determina se os dados precisam ser criptografados\n      const sensitiveStores = ['reputation', 'calls', 'profiles', 'settings', 'test'];\n      \n      // Criptografa apenas dados sensíveis\n      if (sensitiveStores.includes(storeName)) {\n        return encryptData(value);\n      }\n      \n      // Retorna dados não criptografados para stores não sensíveis\n      return { rawData: value };\n    } catch (error) {\n      console.error('Erro ao criptografar dados para armazenamento:', error);\n      throw new Error('Falha ao preparar dados para armazenamento');\n    }\n  },\n  \n  /**\n   * Método para descriptografar dados depois de ler do armazenamento\n   * \n   * @param {string} storeName - Nome do store\n   * @param {string} key - Chave do item\n   * @param {any} encryptedValue - Valor criptografado do armazenamento\n   * @returns {any} - Dados descriptografados\n   */\n  decrypt: (storeName, key, encryptedValue) => {\n    try {\n      // Se for null ou undefined, retorna como está\n      if (encryptedValue === null || encryptedValue === undefined) {\n        return encryptedValue;\n      }\n      \n      // Verifica se os dados estão no formato criptografado (novo formato sem salt)\n      if (encryptedValue && encryptedValue.encryptedData) {\n        return decryptData(encryptedValue);\n      }\n      \n      // Compatibilidade com o formato antigo que tinha salt\n      if (encryptedValue && encryptedValue.encryptedData && encryptedValue.salt) {\n        return decryptData(encryptedValue);\n      }\n      \n      // Retorna dados não criptografados\n      if (encryptedValue && encryptedValue.rawData !== undefined) {\n        return encryptedValue.rawData;\n      }\n      \n      // Retorna o valor original se não estiver em formato reconhecido\n      return encryptedValue;\n    } catch (error) {\n      console.error('Erro ao descriptografar dados do armazenamento:', error);\n      // Em caso de erro na descriptografia, retorna um valor padrão para evitar quebrar a aplicação\n      return null;\n    }\n  }\n};\n\nexport default {\n  encryptData,\n  decryptData,\n  verifyKey,\n  secureHashPhone,\n  generateAccessKey,\n  storageEncryption\n};\n"],"names":["DEFAULT_PRIVACY_SETTINGS","dataRetention","enabled","retentionDays","calls","logs","reports","keepBlocked","sharing","contributeToReputation","privacyLevel","anonymizeContacts","storage","storeCallHistory","encryptSensitiveData","constructor","this","settings","_objectSpread","initialized","initialize","savedSettings","offlineStorage","getItem","_scheduleDataCleanup","console","log","error","updateSettings","newSettings","setItem","getSettings","anonymizeData","data","dataType","_createAggregatedData","anonymized","JSON","parse","stringify","_anonymizeCalls","_anonymizeContacts","_anonymizeReputationData","_removeIdentifiableInfo","performDataCleanup","cleaned","reason","stats","total","now","Date","_cleanupOldData","timestamp","toISOString","message","purgeAllData","confirmationKey","Error","stores","store","clearStore","isCompliant","storeName","key","value","_cleanupTimer","clearTimeout","setTimeout","async","maxAgeDays","keepImportant","arguments","length","undefined","allItems","getAllItems","cutoffDate","getTime","removedCount","item","itemDate","date","createdAt","isNaN","_isImportantItem","removeItem","concat","blocked","category","callsData","Array","isArray","map","call","phoneNumber","phoneHash","secureHashPhone","contactName","notes","contactsData","contact","isContact","isTrusted","isBlocked","reputationData","score","communityScore","reportCount","lastUpdated","events","event","eventType","totalCalls","blockedCount","filter","isAggregated","identifiableFields","result","Object","entries","includes","PrivacySettingsPanel","setSettings","useState","loading","setLoading","saveStatus","setSaveStatus","useEffect","privacyManager","currentSettings","loadSettings","updateSetting","section","updateNestedSetting","subSection","_jsx","className","children","_jsxs","type","checked","onChange","e","target","Number","onClick","disabled","DEFAULT_SECRET_KEY","encryptData","secretKey","stringToEncrypt","encryptedData","CryptoJS","encrypt","toString","decryptData","encryptedPackage","keys","trim","warn","decryptedString","decrypt","Utf8","parseError","normalizedPhone","replace"],"sourceRoot":""}