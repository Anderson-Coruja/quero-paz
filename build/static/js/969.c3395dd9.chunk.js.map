{"version":3,"file":"static/js/969.c3395dd9.chunk.js","mappings":"qKAUO,MAAMA,EAAoB,CAC/BC,OAAQ,SACRC,OAAQ,SACRC,MAAO,QACPC,OAAQ,SACRC,OAAQ,UAIJC,EAAuB,kBACvBC,EAAwB,qBAqT9B,EAhTqB,CAKnB,gBAAMC,SAEmBC,EAAAA,EAAQC,QAAQH,UAG/BE,EAAAA,EAAQE,QAAQJ,EAAuB,CAC3CK,aAAc,KACdC,SAAU,KACVC,UAAU,EACVC,gBAAiB,WAKEN,EAAAA,EAAQC,QAAQJ,UAE/BG,EAAAA,EAAQE,QAAQL,EAAsB,GAEhD,EAOA,iBAAMU,GAKJ,OAL4BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,UAEpBG,KAAKC,qBAGAZ,EAAAA,EAAQC,QAAQJ,IAAyB,EACxD,EAMAgB,YAAiBC,eACFd,EAAAA,EAAQC,QAAQH,IAA0B,CACrDK,aAAc,KACdC,SAAU,KACVC,UAAU,EACVC,gBAAiB,IAQrB,kBAAMM,GACJ,MAAMG,QAAiBJ,KAAKG,cAE5B,IAAKC,EAASX,SACZ,MAAO,CACLY,SAAS,EACTC,MAAO,8BACPC,cAAe,GAInB,IAEE,IAAIC,EAAW,GAEf,OAAQJ,EAASX,UACf,KAAKb,EAAkBC,OACrB2B,QAAiBR,KAAKS,sBACtB,MACF,KAAK7B,EAAkBE,OACrB0B,QAAiBR,KAAKU,sBACtB,MACF,KAAK9B,EAAkBG,MACrByB,QAAiBR,KAAKW,qBACtB,MACF,KAAK/B,EAAkBI,OACrBwB,QAAiBR,KAAKY,sBACtB,MACF,QACE,MAAO,CACLP,SAAS,EACTC,MAAO,4BACPC,cAAe,GAarB,aARMlB,EAAAA,EAAQE,QAAQL,EAAsBsB,SAGtCnB,EAAAA,EAAQE,QAAQJ,GAAqB0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtCT,GAAQ,IACXZ,cAAc,IAAIsB,MAAOC,iBAGpB,CACLV,SAAS,EACTE,cAAeC,EAASV,OACxBN,cAAc,IAAIsB,MAAOC,cAE7B,CAAE,MAAOT,GAEP,OADAU,QAAQV,MAAM,gDAA2CA,GAClD,CACLD,SAAS,EACTC,MAAOA,EAAMW,SAAW,gDACxBV,cAAe,EAEnB,CACF,EAQA,uBAAMW,CAAkBzB,GAAwB,IAAd0B,EAAMtB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1C,IAAKuB,OAAOC,OAAOzC,GAAmB0C,SAAS7B,GAC7C,MAAO,CACLY,SAAS,EACTC,MAAO,6BAIX,IACE,MAAMF,QAAiBJ,KAAKG,cAW5B,aATMd,EAAAA,EAAQE,QAAQJ,GAAqB0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtCT,GAAQ,IACXX,WACA0B,QAAMN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDT,EAASe,QACTA,MAIA,CACLd,SAAS,EACTZ,WAEJ,CAAE,MAAOa,GAEP,OADAU,QAAQV,MAAM,+BAAgCA,GACvC,CACLD,SAAS,EACTC,MAAOA,EAAMW,SAAW,2CAE5B,CACF,EAOA,8BAAMM,CAAyBC,GAC7B,IACE,MAAMpB,QAAiBJ,KAAKG,cAO5B,aALMd,EAAAA,EAAQE,QAAQJ,GAAqB0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtCT,GAAQ,IACXT,gBAAiB6B,KAGZ,CACLnB,SAAS,EACTV,gBAAiB6B,EAErB,CAAE,MAAOlB,GAEP,OADAU,QAAQV,MAAM,6CAA8CA,GACrD,CACLD,SAAS,EACTC,MAAOA,EAAMW,SAAW,yCAE5B,CACF,EAOA,oBAAMQ,CAAeC,GACnB,IAAKA,GAASA,EAAM5B,OAAS,EAC3B,MAAO,GAGT,MAAMU,QAAiBR,KAAKJ,cACtB+B,EAAaD,EAAME,cAEzB,OAAOpB,EAASqB,QAAOC,MAEjBA,EAAQC,OAAQD,EAAQC,KAAKH,cAAcN,SAASK,OAKpDG,EAAQE,cACHF,EAAQE,aAAaC,MAAKC,GAC/BA,EAAMC,OAAOb,SAASI,MAM9B,EAQA,yBAAMjB,GAMJ,OAHAO,QAAQoB,IAAI,8DACN,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,QAE1CtC,KAAKwC,sBAAsB,GACpC,EAMA,yBAAM9B,GAMJ,OAHAM,QAAQoB,IAAI,qDACN,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,QAE1CtC,KAAKwC,sBAAsB,GACpC,EAMA,wBAAM7B,GAMJ,OAHAK,QAAQoB,IAAI,8DACN,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OAE1CtC,KAAKwC,sBAAsB,GACpC,EAMA,yBAAM5B,GAMJ,OAHAI,QAAQoB,IAAI,sEACN,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OAE1CtC,KAAKwC,sBAAsB,GACpC,EAOAA,qBAAAA,CAAsBC,GACpB,MAAMC,EAAQ,CACZ,YAAa,mBAAiB,eAAgB,cAAe,cAC7D,iBAAkB,eAAgB,gBAAiB,mBAAoB,gBAGnElB,EAAS,CAAC,aAAW,WAAY,SAAU,SAAU,cAErDhB,EAAW,GAEjB,IAAK,IAAImC,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAC9B,MAAMC,EAAaF,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAM5C,SACpDkD,EAAcxB,EAAOqB,KAAKC,MAAMD,KAAKE,SAAWvB,EAAO1B,SACvDmD,EAAYJ,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAEnDvC,EAAS0C,KAAK,CACZC,GAAG,WAADC,OAAaT,GACfZ,KAAMa,EACNZ,aAAc,CACZ,CACEqB,KAAM,SACNlB,OAAO,IAADiB,OAAMH,EAAS,OAAAG,OAAMP,KAAKC,MAAsB,IAAhBD,KAAKE,UAAiB,KAAAK,OAAIP,KAAKC,MAAsB,IAAhBD,KAAKE,aAGpFvB,OAAQ,CAACwB,GACTM,MAAM,GAADF,OAAKR,EAAWhB,cAAc2B,QAAQ,IAAK,KAAI,gBACpDC,WAAYX,KAAKE,SAAW,IAEhC,CAEA,OAAOvC,CACT,G,aChUF,MA+PA,EA/PsBiD,KACpB,MAAOjD,EAAUkD,IAAeC,EAAAA,EAAAA,UAAS,KAClCvD,EAAUwD,IAAeD,EAAAA,EAAAA,UAAS,OAClCE,EAASC,IAAcH,EAAAA,EAAAA,WAAS,IAChCI,EAASC,IAAcL,EAAAA,EAAAA,WAAS,IAChCM,EAAaC,IAAkBP,EAAAA,EAAAA,UAAS,KACxCQ,EAAeC,IAAoBT,EAAAA,EAAAA,UAAS,KAC5CU,EAAkBC,IAAuBX,EAAAA,EAAAA,UAAS,OAGzDY,EAAAA,EAAAA,YAAU,KACWrE,iBACXsE,EAAapF,mBACbqF,GAAU,EAElBrF,EAAY,GACX,IAGH,MAAMqF,GAAWC,EAAAA,EAAAA,cAAYxE,UAC3B4D,GAAW,GACX,IACE,MAAOa,EAAcC,SAAcvC,QAAQwC,IAAI,CAC7CL,EAAa5E,cACb4E,EAAarE,gBAGfuD,EAAYiB,GACZf,EAAYgB,EACd,CAAE,MAAOtE,GACPU,QAAQV,MAAM,sCAAuCA,EACvD,CAAC,QACCwD,GAAW,EACb,IACC,IAgCGgB,GAAeJ,EAAAA,EAAAA,cAAYxE,UAC/B,IAAK+D,GAAeA,EAAYnE,OAAS,EACvCsE,EAAiB,SAInB,IACE,MAAMW,QAAgBP,EAAa/C,eAAewC,GAClDG,EAAiBW,EACnB,CAAE,MAAOzE,GACPU,QAAQV,MAAM,8BAA+BA,EAC/C,IACC,CAAC2D,KAGJM,EAAAA,EAAAA,YAAU,KACRO,GAAc,GACb,CAACb,EAAaa,IAGjB,MAAME,EAAqBlD,IACzBmD,EAAAA,EAAAA,KAAA,OAAsBC,UAAU,2DAA0DC,UACxFC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0DAAyDC,UACtEF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAAUG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YAAYC,MAAM,6BAA4BL,UAC/GF,EAAAA,EAAAA,KAAA,QAAMQ,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,6EAGzER,EAAAA,EAAAA,MAAA,OAAKF,UAAU,SAAQC,SAAA,EACrBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,cAAaC,SAAErD,EAAQC,QACrCkD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6BAA4BC,SACxCrD,EAAQE,aAAa6D,KAAI,CAAC3D,EAAO4D,KAChCV,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CACGjD,EAAMC,OAAO,KAACiD,EAAAA,EAAAA,MAAA,QAAMF,UAAU,wBAAuBC,SAAA,CAAC,IAAEjD,EAAMmB,KAAK,SAD5DyC,OAKbhE,EAAQN,QAAUM,EAAQN,OAAO1B,OAAS,IACzCmF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4BAA2BC,SACvCrD,EAAQN,OAAOqE,KAAI,CAACE,EAAOD,KAC1Bb,EAAAA,EAAAA,KAAA,QAAgBC,UAAU,sDAAqDC,SAC5EY,GADQD,UAOlBhE,EAAQ0B,aACPyB,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBC,SAAC,eA3B9BrD,EAAQqB,IAiCpB,OACE8B,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kCAAiCC,UAC9CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sCAAqCC,SAAA,EAClDF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,4CAA2CC,SAAC,qCAC1DF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,qBAAoBC,SAAC,8FAIjCtB,GACCoB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,UACvCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wEAGjBE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EAExBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EACxCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2BAA0BC,SAAC,mCACzCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,uBAAsBC,SAAA,EACnCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCC,SAAA,EACpDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBC,SAAC,mCACvCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SACnB,OAAR/E,QAAQ,IAARA,GAAAA,EAAUZ,aACP,IAAIsB,KAAKV,EAASZ,cAAcwG,iBAChC,2BAGRZ,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCC,SAAA,EACpDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBC,SAAC,4BACvCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAAE3E,EAASV,aAE3CsF,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wCAAuCC,SAAA,EACpDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBC,SAAC,cACvCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SACnB,OAAR/E,QAAQ,IAARA,GAAAA,EAAUX,SACPW,EAASX,SAASwG,OAAO,GAAGC,cAAgB9F,EAASX,SAAS0G,MAAM,GACpE,iCAOZf,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EACxCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,2BAA0BC,SAAC,uBACzCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kCAAiCC,SAAA,EAC9CC,EAAAA,EAAAA,MAAA,UACEF,UAAU,oHACVkB,MAAO/B,GAAoB,GAC3BgC,SAAWC,GAAMhC,EAAoBgC,EAAEC,OAAOH,OAAOjB,SAAA,EAErDF,EAAAA,EAAAA,KAAA,UAAQmB,MAAM,GAAEjB,SAAC,2BACjBF,EAAAA,EAAAA,KAAA,UAAQmB,MAAOxH,EAAkBC,OAAOsG,SAAC,qBACzCF,EAAAA,EAAAA,KAAA,UAAQmB,MAAOxH,EAAkBE,OAAOqG,SAAC,YACzCF,EAAAA,EAAAA,KAAA,UAAQmB,MAAOxH,EAAkBI,OAAOmG,SAAC,6BACzCF,EAAAA,EAAAA,KAAA,UAAQmB,MAAOxH,EAAkBG,MAAMoG,SAAC,+BAE1CF,EAAAA,EAAAA,KAAA,UACEuB,QA5IGtG,UACjB,GAAKmE,EAAL,CAKAL,GAAW,GACX,UAEQQ,EAAatD,kBAAkBmD,GAGrC,MAAMoC,QAAejC,EAAavE,eAE9BwG,EAAOpG,SACTqG,MAAM,qCAADtD,OAA6BqD,EAAOlG,cAAa,mCAChDkE,KAENiC,MAAM,gCAADtD,OAA2BqD,EAAOnG,OAE3C,CAAE,MAAOA,GACPU,QAAQV,MAAM,oCAA+BA,GAC7CoG,MAAM,6DACR,CAAC,QACC1C,GAAW,EACb,CArBA,MAFE0C,MAAM,6CAuBR,EAoHcC,SAAU5C,IAAYM,EACtBa,UAAU,8GAA6GC,SAEtHpB,EAAU,mBAAqB,6BAGpCkB,EAAAA,EAAAA,KAAA,KAAGC,UAAU,6BAA4BC,SACtCd,IAAqBzF,EAAkBC,OACtC,6EACFwF,IAAqBzF,EAAkBE,OACrC,wEACFuF,IAAqBzF,EAAkBI,OACrC,kEACFqF,IAAqBzF,EAAkBG,MACrC,6EACA,8DAKNqG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,OAAMC,SAAA,EACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,SACE5B,KAAK,OACLuD,YAAY,qBACZR,MAAOnC,EACPoC,SAAWC,GAAMpC,EAAeoC,EAAEC,OAAOH,OACzClB,UAAU,6HAEZD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wCAAuCC,UACpDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAAUG,KAAK,OAAOC,OAAO,eAAeC,QAAQ,YAAYC,MAAM,6BAA4BL,UAC/GF,EAAAA,EAAAA,KAAA,QAAMQ,cAAc,QAAQC,eAAe,QAAQC,YAAa,EAAGC,EAAE,wDAM3EX,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBC,SAC5BlB,EAAYnE,OAAS,EACpBqE,EAAcrE,OAAS,GACrBsF,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,yCAAwCC,SAAA,CACnDhB,EAAcrE,OAAO,6BAEvBqE,EAAc0B,KAAI/D,GAAWkD,EAAkBlD,SAGlDsD,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iCAAgCC,SAAA,CAAC,mCACblB,EAAY,OAG/CzD,EAASV,OAAS,GACpBsF,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yCAAwCC,SAAC,sBAGtD3E,EAAS2F,MAAM,EAAG,GAAGN,KAAI/D,GAAWkD,EAAkBlD,KACtDtB,EAASV,OAAS,IACjBsF,EAAAA,EAAAA,MAAA,UAAQF,UAAU,oEAAmEC,SAAA,CAAC,gBACtE3E,EAASV,OAAO,mBAKpCmF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iCAAgCC,SAAC,6FASxD,C","sources":["services/integration/contactsSync.js","components/integration/ContactsPanel.jsx"],"sourcesContent":["/**\n * Serviço de Sincronização de Contatos para o Quero Paz\n * \n * Este serviço permite a sincronização de contatos com serviços externos\n * como Google Contacts, iCloud e outros provedores.\n */\n\nimport storage from '../storage';\n\n// Provedores de contatos suportados\nexport const CONTACT_PROVIDERS = {\n  GOOGLE: 'google',\n  ICLOUD: 'icloud',\n  LOCAL: 'local',\n  DEVICE: 'device',\n  CUSTOM: 'custom'\n};\n\n// Armazenamento local para cache de contatos\nconst CONTACTS_STORAGE_KEY = 'synced_contacts';\nconst SYNC_INFO_STORAGE_KEY = 'contacts_sync_info';\n\n/**\n * Serviço de sincronização de contatos\n */\nconst contactsSync = {\n  /**\n   * Inicializa o serviço\n   * @returns {Promise<void>}\n   */\n  async initialize() {\n    // Verifica se já existe informações de sincronização\n    const syncInfo = await storage.getItem(SYNC_INFO_STORAGE_KEY);\n    if (!syncInfo) {\n      // Inicializa com valores padrão\n      await storage.setItem(SYNC_INFO_STORAGE_KEY, {\n        lastSyncDate: null,\n        provider: null,\n        autoSync: false,\n        whitelistGroups: []\n      });\n    }\n    \n    // Verifica se já existe cache de contatos\n    const contacts = await storage.getItem(CONTACTS_STORAGE_KEY);\n    if (!contacts) {\n      await storage.setItem(CONTACTS_STORAGE_KEY, []);\n    }\n  },\n  \n  /**\n   * Obtém a lista de contatos sincronizados\n   * @param {boolean} forceRefresh - Se deve forçar atualização\n   * @returns {Promise<Array>} Lista de contatos\n   */\n  async getContacts(forceRefresh = false) {\n    if (forceRefresh) {\n      await this.syncContacts();\n    }\n    \n    return await storage.getItem(CONTACTS_STORAGE_KEY) || [];\n  },\n  \n  /**\n   * Obtém informações da sincronização\n   * @returns {Promise<Object>} Informações de sincronização\n   */\n  async getSyncInfo() {\n    return await storage.getItem(SYNC_INFO_STORAGE_KEY) || {\n      lastSyncDate: null,\n      provider: null,\n      autoSync: false,\n      whitelistGroups: []\n    };\n  },\n  \n  /**\n   * Executa a sincronização de contatos com o provedor configurado\n   * @returns {Promise<Object>} Resultado da sincronização\n   */\n  async syncContacts() {\n    const syncInfo = await this.getSyncInfo();\n    \n    if (!syncInfo.provider) {\n      return { \n        success: false, \n        error: 'Nenhum provedor configurado',\n        contactsCount: 0\n      };\n    }\n    \n    try {\n      // Baseado no provedor, faz chamada específica\n      let contacts = [];\n      \n      switch (syncInfo.provider) {\n        case CONTACT_PROVIDERS.GOOGLE:\n          contacts = await this._syncGoogleContacts();\n          break;\n        case CONTACT_PROVIDERS.ICLOUD:\n          contacts = await this._syncICloudContacts();\n          break;\n        case CONTACT_PROVIDERS.LOCAL:\n          contacts = await this._syncLocalContacts();\n          break;\n        case CONTACT_PROVIDERS.DEVICE:\n          contacts = await this._syncDeviceContacts();\n          break;\n        default:\n          return { \n            success: false, \n            error: 'Provedor não suportado',\n            contactsCount: 0\n          };\n      }\n      \n      // Atualiza cache local\n      await storage.setItem(CONTACTS_STORAGE_KEY, contacts);\n      \n      // Atualiza informações de sincronização\n      await storage.setItem(SYNC_INFO_STORAGE_KEY, {\n        ...syncInfo,\n        lastSyncDate: new Date().toISOString()\n      });\n      \n      return {\n        success: true,\n        contactsCount: contacts.length,\n        lastSyncDate: new Date().toISOString()\n      };\n    } catch (error) {\n      console.error('Erro durante sincronização de contatos:', error);\n      return {\n        success: false,\n        error: error.message || 'Erro desconhecido durante sincronização',\n        contactsCount: 0\n      };\n    }\n  },\n  \n  /**\n   * Configura o provedor de sincronização\n   * @param {string} provider - Provedor de contatos\n   * @param {Object} config - Configurações específicas\n   * @returns {Promise<Object>} Resultado da configuração\n   */\n  async configureProvider(provider, config = {}) {\n    if (!Object.values(CONTACT_PROVIDERS).includes(provider)) {\n      return {\n        success: false,\n        error: 'Provedor não suportado'\n      };\n    }\n    \n    try {\n      const syncInfo = await this.getSyncInfo();\n      \n      await storage.setItem(SYNC_INFO_STORAGE_KEY, {\n        ...syncInfo,\n        provider,\n        config: {\n          ...syncInfo.config,\n          ...config\n        }\n      });\n      \n      return {\n        success: true,\n        provider\n      };\n    } catch (error) {\n      console.error('Erro ao configurar provedor:', error);\n      return {\n        success: false,\n        error: error.message || 'Erro desconhecido ao configurar provedor'\n      };\n    }\n  },\n  \n  /**\n   * Configura grupos de contatos para lista branca automática\n   * @param {Array} groups - Lista de grupos/etiquetas\n   * @returns {Promise<Object>} Resultado da configuração\n   */\n  async configureWhitelistGroups(groups) {\n    try {\n      const syncInfo = await this.getSyncInfo();\n      \n      await storage.setItem(SYNC_INFO_STORAGE_KEY, {\n        ...syncInfo,\n        whitelistGroups: groups\n      });\n      \n      return {\n        success: true,\n        whitelistGroups: groups\n      };\n    } catch (error) {\n      console.error('Erro ao configurar grupos de lista branca:', error);\n      return {\n        success: false,\n        error: error.message || 'Erro desconhecido ao configurar grupos'\n      };\n    }\n  },\n  \n  /**\n   * Busca contatos pelo nome ou número\n   * @param {string} query - Termo de busca\n   * @returns {Promise<Array>} Contatos encontrados\n   */\n  async searchContacts(query) {\n    if (!query || query.length < 2) {\n      return [];\n    }\n    \n    const contacts = await this.getContacts();\n    const queryLower = query.toLowerCase();\n    \n    return contacts.filter(contact => {\n      // Busca por nome\n      if (contact.name && contact.name.toLowerCase().includes(queryLower)) {\n        return true;\n      }\n      \n      // Busca por número\n      if (contact.phoneNumbers) {\n        return contact.phoneNumbers.some(phone => \n          phone.number.includes(query)\n        );\n      }\n      \n      return false;\n    });\n  },\n  \n  // ===== Métodos privados para sincronização com provedores específicos =====\n  \n  /**\n   * Sincroniza com Google Contacts (simulado)\n   * @private\n   */\n  async _syncGoogleContacts() {\n    // Em uma implementação real, usaria a API do Google\n    // Por enquanto, retorna dados simulados\n    console.log('Simulando sincronização com Google Contacts...');\n    await new Promise(resolve => setTimeout(resolve, 1500)); // Simula latência\n    \n    return this._generateMockContacts(50);\n  },\n  \n  /**\n   * Sincroniza com iCloud (simulado)\n   * @private\n   */\n  async _syncICloudContacts() {\n    // Em uma implementação real, usaria a API da Apple\n    // Por enquanto, retorna dados simulados\n    console.log('Simulando sincronização com iCloud...');\n    await new Promise(resolve => setTimeout(resolve, 1200)); // Simula latência\n    \n    return this._generateMockContacts(30);\n  },\n  \n  /**\n   * Sincroniza com armazenamento local do dispositivo (simulado)\n   * @private\n   */\n  async _syncLocalContacts() {\n    // Em uma implementação real, usaria APIs de acesso aos contatos do dispositivo\n    // Por enquanto, retorna dados simulados\n    console.log('Simulando sincronização com contatos locais...');\n    await new Promise(resolve => setTimeout(resolve, 800)); // Simula latência\n    \n    return this._generateMockContacts(20);\n  },\n  \n  /**\n   * Sincroniza com API de contatos do dispositivo (simulado)\n   * @private\n   */\n  async _syncDeviceContacts() {\n    // Em uma implementação real, usaria APIs de acesso aos contatos do dispositivo\n    // Por enquanto, retorna dados simulados\n    console.log('Simulando sincronização com contatos do dispositivo...');\n    await new Promise(resolve => setTimeout(resolve, 1000)); // Simula latência\n    \n    return this._generateMockContacts(40);\n  },\n  \n  /**\n   * Gera contatos de exemplo para simulação\n   * @param {number} count - Número de contatos a gerar\n   * @private\n   */\n  _generateMockContacts(count) {\n    const names = [\n      'Ana Silva', 'João Oliveira', 'Maria Santos', 'Pedro Costa', 'Carla Souza',\n      'Bruno Ferreira', 'Juliana Lima', 'Ricardo Gomes', 'Fernanda Martins', 'Luiz Pereira'\n    ];\n    \n    const groups = ['Família', 'Trabalho', 'Amigos', 'Escola', 'Importante'];\n    \n    const contacts = [];\n    \n    for (let i = 0; i < count; i++) {\n      const randomName = names[Math.floor(Math.random() * names.length)];\n      const randomGroup = groups[Math.floor(Math.random() * groups.length)];\n      const randomDDD = Math.floor(Math.random() * 90) + 10; // DDD entre 10 e 99\n      \n      contacts.push({\n        id: `contact_${i}`,\n        name: randomName,\n        phoneNumbers: [\n          {\n            type: 'mobile',\n            number: `(${randomDDD}) 9${Math.floor(Math.random() * 10000)}-${Math.floor(Math.random() * 10000)}`\n          }\n        ],\n        groups: [randomGroup],\n        email: `${randomName.toLowerCase().replace(' ', '.')}@exemplo.com`,\n        isFavorite: Math.random() > 0.8 // 20% de chance de ser favorito\n      });\n    }\n    \n    return contacts;\n  }\n};\n\nexport default contactsSync;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport contactsSync, { CONTACT_PROVIDERS } from '../../services/integration/contactsSync';\n\n/**\n * Painel de sincronização e gerenciamento de contatos\n */\nconst ContactsPanel = () => {\n  const [contacts, setContacts] = useState([]);\n  const [syncInfo, setSyncInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [syncing, setSyncing] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [selectedProvider, setSelectedProvider] = useState(null);\n\n  // Carrega dados iniciais\n  useEffect(() => {\n    const initialize = async () => {\n      await contactsSync.initialize();\n      await loadData();\n    };\n    initialize();\n  }, []);\n\n  // Carrega dados de contatos e informações de sincronização\n  const loadData = useCallback(async () => {\n    setLoading(true);\n    try {\n      const [contactsList, info] = await Promise.all([\n        contactsSync.getContacts(),\n        contactsSync.getSyncInfo()\n      ]);\n      \n      setContacts(contactsList);\n      setSyncInfo(info);\n    } catch (error) {\n      console.error('Erro ao carregar dados de contatos:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Inicia sincronização com o provedor selecionado\n  const handleSync = async () => {\n    if (!selectedProvider) {\n      alert('Selecione um provedor de contatos primeiro');\n      return;\n    }\n    \n    setSyncing(true);\n    try {\n      // Configura o provedor\n      await contactsSync.configureProvider(selectedProvider);\n      \n      // Inicia sincronização\n      const result = await contactsSync.syncContacts();\n      \n      if (result.success) {\n        alert(`Sincronização concluída! ${result.contactsCount} contatos sincronizados.`);\n        await loadData(); // Recarrega os dados\n      } else {\n        alert(`Erro na sincronização: ${result.error}`);\n      }\n    } catch (error) {\n      console.error('Erro durante sincronização:', error);\n      alert('Ocorreu um erro durante a sincronização de contatos.');\n    } finally {\n      setSyncing(false);\n    }\n  };\n\n  // Pesquisa contatos\n  const handleSearch = useCallback(async () => {\n    if (!searchQuery || searchQuery.length < 2) {\n      setSearchResults([]);\n      return;\n    }\n    \n    try {\n      const results = await contactsSync.searchContacts(searchQuery);\n      setSearchResults(results);\n    } catch (error) {\n      console.error('Erro ao pesquisar contatos:', error);\n    }\n  }, [searchQuery]);\n\n  // Executa pesquisa quando o query muda\n  useEffect(() => {\n    handleSearch();\n  }, [searchQuery, handleSearch]);\n\n  // Renderiza cartão de contato\n  const renderContactCard = (contact) => (\n    <div key={contact.id} className=\"p-3 bg-white rounded-lg shadow-sm border border-gray-200\">\n      <div className=\"flex items-start\">\n        <div className=\"bg-paz-blue-100 text-paz-blue-700 p-2 rounded-full mr-3\">\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n          </svg>\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"font-medium\">{contact.name}</h3>\n          <div className=\"text-sm text-gray-600 mt-1\">\n            {contact.phoneNumbers.map((phone, idx) => (\n              <div key={idx}>\n                {phone.number} <span className=\"text-gray-400 text-xs\">({phone.type})</span>\n              </div>\n            ))}\n          </div>\n          {contact.groups && contact.groups.length > 0 && (\n            <div className=\"mt-2 flex flex-wrap gap-1\">\n              {contact.groups.map((group, idx) => (\n                <span key={idx} className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded\">\n                  {group}\n                </span>\n              ))}\n            </div>\n          )}\n        </div>\n        {contact.isFavorite && (\n          <span className=\"text-yellow-500\">⭐</span>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"max-w-3xl mx-auto space-y-6 p-4\">\n      <div className=\"bg-white rounded-paz shadow-paz p-6\">\n        <h2 className=\"text-2xl font-bold text-paz-blue-800 mb-2\">Sincronização de Contatos</h2>\n        <p className=\"text-gray-600 mb-6\">\n          Sincronize seus contatos para gerenciar melhor as chamadas e criar regras personalizadas.\n        </p>\n        \n        {loading ? (\n          <div className=\"flex justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-paz-blue-600\"></div>\n          </div>\n        ) : (\n          <div className=\"space-y-6\">\n            {/* Informações de sincronização */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h3 className=\"font-medium text-lg mb-2\">Status de Sincronização</h3>\n              <div className=\"flex flex-wrap gap-4\">\n                <div className=\"bg-white p-3 rounded shadow-sm flex-1\">\n                  <div className=\"text-sm text-gray-500\">Última sincronização</div>\n                  <div className=\"font-semibold\">\n                    {syncInfo?.lastSyncDate \n                      ? new Date(syncInfo.lastSyncDate).toLocaleString() \n                      : 'Nunca sincronizado'}\n                  </div>\n                </div>\n                <div className=\"bg-white p-3 rounded shadow-sm flex-1\">\n                  <div className=\"text-sm text-gray-500\">Contatos sincronizados</div>\n                  <div className=\"font-semibold\">{contacts.length}</div>\n                </div>\n                <div className=\"bg-white p-3 rounded shadow-sm flex-1\">\n                  <div className=\"text-sm text-gray-500\">Provedor</div>\n                  <div className=\"font-semibold\">\n                    {syncInfo?.provider \n                      ? syncInfo.provider.charAt(0).toUpperCase() + syncInfo.provider.slice(1) \n                      : 'Não configurado'}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Seleção de provedor e sincronização */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h3 className=\"font-medium text-lg mb-3\">Sincronizar Agora</h3>\n              <div className=\"flex flex-col sm:flex-row gap-3\">\n                <select \n                  className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-paz-blue-500 focus:border-paz-blue-500\"\n                  value={selectedProvider || ''}\n                  onChange={(e) => setSelectedProvider(e.target.value)}\n                >\n                  <option value=\"\">Selecione um provedor</option>\n                  <option value={CONTACT_PROVIDERS.GOOGLE}>Google Contacts</option>\n                  <option value={CONTACT_PROVIDERS.ICLOUD}>iCloud</option>\n                  <option value={CONTACT_PROVIDERS.DEVICE}>Contatos do Dispositivo</option>\n                  <option value={CONTACT_PROVIDERS.LOCAL}>Importação Local</option>\n                </select>\n                <button\n                  onClick={handleSync}\n                  disabled={syncing || !selectedProvider}\n                  className=\"px-4 py-2 bg-paz-blue-600 text-white rounded-lg disabled:opacity-50 hover:bg-paz-blue-700 transition-colors\"\n                >\n                  {syncing ? 'Sincronizando...' : 'Sincronizar Contatos'}\n                </button>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-2\">\n                {selectedProvider === CONTACT_PROVIDERS.GOOGLE ? \n                  'Será solicitado acesso à sua conta Google para sincronizar contatos.' :\n                selectedProvider === CONTACT_PROVIDERS.ICLOUD ? \n                  'Será necessário autorizar o acesso aos seus contatos do iCloud.' :\n                selectedProvider === CONTACT_PROVIDERS.DEVICE ? \n                  'Os contatos serão importados diretamente do seu dispositivo.' :\n                selectedProvider === CONTACT_PROVIDERS.LOCAL ? \n                  'Você poderá importar um arquivo de contatos no formato CSV ou vCard.' :\n                  'Selecione um provedor para sincronizar seus contatos.'}\n              </p>\n            </div>\n            \n            {/* Pesquisar contatos */}\n            <div className=\"mt-6\">\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Buscar contatos...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-paz-blue-500 focus:border-paz-blue-500\"\n                />\n                <div className=\"absolute left-3 top-2.5 text-gray-400\">\n                  <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                  </svg>\n                </div>\n              </div>\n              \n              {/* Resultados da pesquisa ou lista de contatos */}\n              <div className=\"mt-4 space-y-3\">\n                {searchQuery.length > 0 ? (\n                  searchResults.length > 0 ? (\n                    <div>\n                      <h3 className=\"text-sm font-medium text-gray-500 mb-2\">\n                        {searchResults.length} resultados encontrados\n                      </h3>\n                      {searchResults.map(contact => renderContactCard(contact))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      Nenhum contato encontrado para \"{searchQuery}\"\n                    </div>\n                  )\n                ) : contacts.length > 0 ? (\n                  <div>\n                    <h3 className=\"text-sm font-medium text-gray-500 mb-2\">\n                      Contatos recentes\n                    </h3>\n                    {contacts.slice(0, 5).map(contact => renderContactCard(contact))}\n                    {contacts.length > 5 && (\n                      <button className=\"mt-3 text-paz-blue-600 text-sm hover:underline w-full text-center\">\n                        Ver todos os {contacts.length} contatos\n                      </button>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    Nenhum contato sincronizado ainda. Sincronize seus contatos para começar.\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ContactsPanel;\n"],"names":["CONTACT_PROVIDERS","GOOGLE","ICLOUD","LOCAL","DEVICE","CUSTOM","CONTACTS_STORAGE_KEY","SYNC_INFO_STORAGE_KEY","initialize","storage","getItem","setItem","lastSyncDate","provider","autoSync","whitelistGroups","getContacts","arguments","length","undefined","this","syncContacts","async","getSyncInfo","syncInfo","success","error","contactsCount","contacts","_syncGoogleContacts","_syncICloudContacts","_syncLocalContacts","_syncDeviceContacts","_objectSpread","Date","toISOString","console","message","configureProvider","config","Object","values","includes","configureWhitelistGroups","groups","searchContacts","query","queryLower","toLowerCase","filter","contact","name","phoneNumbers","some","phone","number","log","Promise","resolve","setTimeout","_generateMockContacts","count","names","i","randomName","Math","floor","random","randomGroup","randomDDD","push","id","concat","type","email","replace","isFavorite","ContactsPanel","setContacts","useState","setSyncInfo","loading","setLoading","syncing","setSyncing","searchQuery","setSearchQuery","searchResults","setSearchResults","selectedProvider","setSelectedProvider","useEffect","contactsSync","loadData","useCallback","contactsList","info","all","handleSearch","results","renderContactCard","_jsx","className","children","_jsxs","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","map","idx","group","toLocaleString","charAt","toUpperCase","slice","value","onChange","e","target","onClick","result","alert","disabled","placeholder"],"sourceRoot":""}